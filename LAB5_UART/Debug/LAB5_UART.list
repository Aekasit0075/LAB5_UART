
LAB5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800509c  0800509c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a4  080050a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000074  08005120  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005120  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ee6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001717  00000000  00000000  00028f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dfe  00000000  00000000  00040dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085eae  00000000  00000000  00049bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfa7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002124  00000000  00000000  000cfad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e2c 	.word	0x08004e2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004e2c 	.word	0x08004e2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fdcc 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f842 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 f8fc 	bl	8000f78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d80:	f000 f8d2 	bl	8000f28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d84:	f000 f8a6 	bl	8000ed4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Button1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	4817      	ldr	r0, [pc, #92]	; (8000dec <main+0x7c>)
 8000d8e:	f001 fced 	bl	800276c <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <main+0x80>)
 8000d98:	701a      	strb	r2, [r3, #0]
  UARTDMAConfig();
 8000d9a:	f000 fbe1 	bl	8001560 <UARTDMAConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DummyTask();
 8000d9e:	f000 fba1 	bl	80014e4 <DummyTask>
	  functionstate();
 8000da2:	f000 fb17 	bl	80013d4 <functionstate>
	  if(round%2 == 1)
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <main+0x84>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	bfb8      	it	lt
 8000db2:	425b      	neglt	r3, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <main+0x5a>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2120      	movs	r1, #32
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <main+0x88>)
 8000dbe:	f001 fced 	bl	800279c <HAL_GPIO_WritePin>
		  RxBuffer[0] = '\0';
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <main+0x8c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e00a      	b.n	8000de0 <main+0x70>
//		  sprintf((char*)TxBuffer,"LED OFF %s\r\n", RxBuffer);
//		  HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
	  }
	  else if(round%2 == 0)
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <main+0x84>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <main+0x70>
	  {
		  DummyTask();
 8000dd6:	f000 fb85 	bl	80014e4 <DummyTask>
		  RxBuffer[0] = '\0';
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <main+0x8c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
//		  sprintf((char*)TxBuffer,"LED ON %s\r\n", RxBuffer);
//		  HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <main+0x88>)
 8000de4:	f001 fcf3 	bl	80027ce <HAL_GPIO_TogglePin>
	  DummyTask();
 8000de8:	e7d9      	b.n	8000d9e <main+0x2e>
 8000dea:	bf00      	nop
 8000dec:	40020800 	.word	0x40020800
 8000df0:	20000195 	.word	0x20000195
 8000df4:	20000268 	.word	0x20000268
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	20000198 	.word	0x20000198

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fba4 	bl	800455c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e70:	2310      	movs	r3, #16
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fcbc 	bl	8002804 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e92:	f000 fb9f 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 ff1e 	bl	8002cf4 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ebe:	f000 fb89 	bl	80015d4 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_USART2_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f002 f912 	bl	8003134 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 fb5d 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000090 	.word	0x20000090
 8000f24:	40004400 	.word	0x40004400

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_DMA_Init+0x4c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <MX_DMA_Init+0x4c>)
 8000f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <MX_DMA_Init+0x4c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f000 fe4f 	bl	8001bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f000 fe68 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f000 fe47 	bl	8001bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f64:	2011      	movs	r0, #17
 8000f66:	f000 fe60 	bl	8001c2a <HAL_NVIC_EnableIRQ>

}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_GPIO_Init+0xd0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2121      	movs	r1, #33	; 0x21
 8001002:	4812      	ldr	r0, [pc, #72]	; (800104c <MX_GPIO_Init+0xd4>)
 8001004:	f001 fbca 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_GPIO_Init+0xd8>)
 8001020:	f001 fa20 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001024:	2321      	movs	r3, #33	; 0x21
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_GPIO_Init+0xd4>)
 800103c:	f001 fa12 	bl	8002464 <HAL_GPIO_Init>

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020800 	.word	0x40020800

08001054 <CheckRising>:

/* USER CODE BEGIN 4 */
void CheckRising()
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
	Button1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4835      	ldr	r0, [pc, #212]	; (8001134 <CheckRising+0xe0>)
 8001060:	f001 fb84 	bl	800276c <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <CheckRising+0xe4>)
 800106a:	701a      	strb	r2, [r3, #0]
	current = Button1;
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <CheckRising+0xe4>)
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <CheckRising+0xe8>)
 8001072:	701a      	strb	r2, [r3, #0]

	if(before == 0 && current == 1)
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <CheckRising+0xec>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d127      	bne.n	80010cc <CheckRising+0x78>
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <CheckRising+0xe8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d123      	bne.n	80010cc <CheckRising+0x78>
	{
		uint8_t text1[] = "Status : UnPressed\r\n";
 8001084:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <CheckRising+0xf0>)
 8001086:	f107 0418 	add.w	r4, r7, #24
 800108a:	461d      	mov	r5, r3
 800108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001090:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001094:	6020      	str	r0, [r4, #0]
 8001096:	3404      	adds	r4, #4
 8001098:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit_DMA(&huart2, text1 , strlen((char*)text1));
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f89e 	bl	80001e0 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4826      	ldr	r0, [pc, #152]	; (8001148 <CheckRising+0xf4>)
 80010b0:	f002 f88e 	bl	80031d0 <HAL_UART_Transmit_DMA>
		checkstate = 0;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <CheckRising+0xf8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		while(!checkstate)
 80010ba:	e002      	b.n	80010c2 <CheckRising+0x6e>
		{
			HAL_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fc99 	bl	80019f4 <HAL_Delay>
		while(!checkstate)
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <CheckRising+0xf8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f8      	beq.n	80010bc <CheckRising+0x68>
	{
 80010ca:	e028      	b.n	800111e <CheckRising+0xca>
		}
	}
	else if(current == 0 && before == 1)
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <CheckRising+0xe8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d124      	bne.n	800111e <CheckRising+0xca>
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <CheckRising+0xec>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d120      	bne.n	800111e <CheckRising+0xca>
	{
		uint8_t text[] = "Status : Pressed\r\n";
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <CheckRising+0xfc>)
 80010de:	1d3c      	adds	r4, r7, #4
 80010e0:	461d      	mov	r5, r3
 80010e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e6:	682b      	ldr	r3, [r5, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	8022      	strh	r2, [r4, #0]
 80010ec:	3402      	adds	r4, #2
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_DMA(&huart2, text , strlen((char*)text));
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f873 	bl	80001e0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <CheckRising+0xf4>)
 8001104:	f002 f864 	bl	80031d0 <HAL_UART_Transmit_DMA>
		checkstate = 0;
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <CheckRising+0xf8>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		while(!checkstate)
 800110e:	e002      	b.n	8001116 <CheckRising+0xc2>
		{
			HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fc6f 	bl	80019f4 <HAL_Delay>
		while(!checkstate)
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <CheckRising+0xf8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f8      	beq.n	8001110 <CheckRising+0xbc>
		}
	}
	before = current;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <CheckRising+0xe8>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <CheckRising+0xec>)
 8001124:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fc64 	bl	80019f4 <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bdb0      	pop	{r4, r5, r7, pc}
 8001134:	40020800 	.word	0x40020800
 8001138:	20000195 	.word	0x20000195
 800113c:	20000000 	.word	0x20000000
 8001140:	20000194 	.word	0x20000194
 8001144:	08004e44 	.word	0x08004e44
 8001148:	20000090 	.word	0x20000090
 800114c:	20000002 	.word	0x20000002
 8001150:	08004e5c 	.word	0x08004e5c

08001154 <mainmenu>:

void mainmenu()
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b0a4      	sub	sp, #144	; 0x90
 8001158:	af00      	add	r7, sp, #0
	uint8_t textmainmenu[] = 	"Please select the function:\r\n\r\n"
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <mainmenu+0xa0>)
 800115c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001160:	461d      	mov	r5, r3
 8001162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001172:	6020      	str	r0, [r4, #0]
 8001174:	3404      	adds	r4, #4
 8001176:	8021      	strh	r1, [r4, #0]
 8001178:	3402      	adds	r4, #2
 800117a:	0c0b      	lsrs	r3, r1, #16
 800117c:	7023      	strb	r3, [r4, #0]
								"Press 0 : LED Control\r\n";
	HAL_UART_Transmit_DMA(&huart2, textmainmenu , strlen((char*)textmainmenu));
 800117e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f82c 	bl	80001e0 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001190:	4619      	mov	r1, r3
 8001192:	4819      	ldr	r0, [pc, #100]	; (80011f8 <mainmenu+0xa4>)
 8001194:	f002 f81c 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <mainmenu+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 800119e:	e002      	b.n	80011a6 <mainmenu+0x52>
	{
		HAL_Delay(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 fc27 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <mainmenu+0xa8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f8      	beq.n	80011a0 <mainmenu+0x4c>
	}
	uint8_t textmainmenu5[] = 	"---------------------------------------------------------\r\n"
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <mainmenu+0xac>)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	2257      	movs	r2, #87	; 0x57
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f9c2 	bl	8004540 <memcpy>
								"Press 1 : Button Status\r\n\r\n";
	HAL_UART_Transmit_DMA(&huart2, textmainmenu5, strlen((char*)textmainmenu5));
 80011bc:	463b      	mov	r3, r7
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f80e 	bl	80001e0 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <mainmenu+0xa4>)
 80011ce:	f001 ffff 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <mainmenu+0xa8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 80011d8:	e002      	b.n	80011e0 <mainmenu+0x8c>
	{
		HAL_Delay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 fc0a 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <mainmenu+0xa8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f8      	beq.n	80011da <mainmenu+0x86>
	}
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3790      	adds	r7, #144	; 0x90
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08004e70 	.word	0x08004e70
 80011f8:	20000090 	.word	0x20000090
 80011fc:	20000002 	.word	0x20000002
 8001200:	08004ea8 	.word	0x08004ea8

08001204 <detailscase0>:
void detailscase0()
{
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b0bc      	sub	sp, #240	; 0xf0
 8001208:	af00      	add	r7, sp, #0
	uint8_t textmainmenu1[] = 	"---------------------------------------------------------\r\n"
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <detailscase0+0x10c>)
 800120c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001210:	4611      	mov	r1, r2
 8001212:	2267      	movs	r2, #103	; 0x67
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f993 	bl	8004540 <memcpy>
								"Press the Character:\r\n\r\n"
								"a : Speed Up +1Hz\r\n";
	HAL_UART_Transmit_DMA(&huart2, textmainmenu1 , strlen((char*)textmainmenu1));
 800121a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800121e:	4618      	mov	r0, r3
 8001220:	f7fe ffde 	bl	80001e0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	b29a      	uxth	r2, r3
 8001228:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800122c:	4619      	mov	r1, r3
 800122e:	4839      	ldr	r0, [pc, #228]	; (8001314 <detailscase0+0x110>)
 8001230:	f001 ffce 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <detailscase0+0x114>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 800123a:	e002      	b.n	8001242 <detailscase0+0x3e>
	{
		HAL_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fbd9 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <detailscase0+0x114>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f8      	beq.n	800123c <detailscase0+0x38>
	}
	uint8_t textmainmenu2[] = "s : Speed Down -1Hz\r\n";
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <detailscase0+0x118>)
 800124c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001250:	461d      	mov	r5, r3
 8001252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001256:	e895 0003 	ldmia.w	r5, {r0, r1}
 800125a:	6020      	str	r0, [r4, #0]
 800125c:	3404      	adds	r4, #4
 800125e:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, textmainmenu2 , strlen((char*)textmainmenu2));
 8001260:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ffbb 	bl	80001e0 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001272:	4619      	mov	r1, r3
 8001274:	4827      	ldr	r0, [pc, #156]	; (8001314 <detailscase0+0x110>)
 8001276:	f001 ffab 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <detailscase0+0x114>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 8001280:	e002      	b.n	8001288 <detailscase0+0x84>
	{
		HAL_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f000 fbb6 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <detailscase0+0x114>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f8      	beq.n	8001282 <detailscase0+0x7e>
	}
	uint8_t textmainmenu3[] = "d : On/off\r\n";
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <detailscase0+0x11c>)
 8001292:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001298:	c407      	stmia	r4!, {r0, r1, r2}
 800129a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, textmainmenu3 , strlen((char*)textmainmenu3));
 800129c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ff9d 	bl	80001e0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ae:	4619      	mov	r1, r3
 80012b0:	4818      	ldr	r0, [pc, #96]	; (8001314 <detailscase0+0x110>)
 80012b2:	f001 ff8d 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <detailscase0+0x114>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 80012bc:	e002      	b.n	80012c4 <detailscase0+0xc0>
	{
		HAL_Delay(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 fb98 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <detailscase0+0x114>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f8      	beq.n	80012be <detailscase0+0xba>
	}
	uint8_t textmainmenu4[] = "Press 'x' to go to back menu\r\n"
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <detailscase0+0x120>)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4611      	mov	r1, r2
 80012d2:	225c      	movs	r2, #92	; 0x5c
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 f933 	bl	8004540 <memcpy>
							  "---------------------------------------------------------\r\n\r\n";
	HAL_UART_Transmit_DMA(&huart2, textmainmenu4 , strlen((char*)textmainmenu4));
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ff7f 	bl	80001e0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	480a      	ldr	r0, [pc, #40]	; (8001314 <detailscase0+0x110>)
 80012ec:	f001 ff70 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <detailscase0+0x114>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 80012f6:	e002      	b.n	80012fe <detailscase0+0xfa>
	{
		HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 fb7b 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <detailscase0+0x114>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f8      	beq.n	80012f8 <detailscase0+0xf4>
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	37f0      	adds	r7, #240	; 0xf0
 800130c:	46bd      	mov	sp, r7
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	08004f00 	.word	0x08004f00
 8001314:	20000090 	.word	0x20000090
 8001318:	20000002 	.word	0x20000002
 800131c:	08004f68 	.word	0x08004f68
 8001320:	08004f80 	.word	0x08004f80
 8001324:	08004f90 	.word	0x08004f90

08001328 <detailscase1>:
void detailscase1()
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b094      	sub	sp, #80	; 0x50
 800132c:	af00      	add	r7, sp, #0
	uint8_t textmainmenu6[] =	"Press 'x' to go to back menu\r\n";
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <detailscase1+0x9c>)
 8001330:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001334:	461d      	mov	r5, r3
 8001336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800133e:	c407      	stmia	r4!, {r0, r1, r2}
 8001340:	8023      	strh	r3, [r4, #0]
 8001342:	3402      	adds	r4, #2
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, textmainmenu6 , strlen((char*)textmainmenu6));
 8001348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff47 	bl	80001e0 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800135a:	4619      	mov	r1, r3
 800135c:	481a      	ldr	r0, [pc, #104]	; (80013c8 <detailscase1+0xa0>)
 800135e:	f001 ff37 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <detailscase1+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 8001368:	e002      	b.n	8001370 <detailscase1+0x48>
	{
		HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fb42 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <detailscase1+0xa4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f8      	beq.n	800136a <detailscase1+0x42>
	}
	uint8_t textmainmenu7[] = "If Button Press/UnPress Show Button Status:\r\n";
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <detailscase1+0xa8>)
 800137a:	463c      	mov	r4, r7
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800138a:	c407      	stmia	r4!, {r0, r1, r2}
 800138c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, textmainmenu7 , strlen((char*)textmainmenu7));
 800138e:	463b      	mov	r3, r7
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff25 	bl	80001e0 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	b29a      	uxth	r2, r3
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	480a      	ldr	r0, [pc, #40]	; (80013c8 <detailscase1+0xa0>)
 80013a0:	f001 ff16 	bl	80031d0 <HAL_UART_Transmit_DMA>
	checkstate = 0;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <detailscase1+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	while(!checkstate)
 80013aa:	e002      	b.n	80013b2 <detailscase1+0x8a>
	{
		HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fb21 	bl	80019f4 <HAL_Delay>
	while(!checkstate)
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <detailscase1+0xa4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f8      	beq.n	80013ac <detailscase1+0x84>
	}
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3750      	adds	r7, #80	; 0x50
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	08004fec 	.word	0x08004fec
 80013c8:	20000090 	.word	0x20000090
 80013cc:	20000002 	.word	0x20000002
 80013d0:	0800500c 	.word	0x0800500c

080013d4 <functionstate>:

void functionstate()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	switch(modecontrol)
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <functionstate+0xf0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b78      	cmp	r3, #120	; 0x78
 80013de:	d051      	beq.n	8001484 <functionstate+0xb0>
 80013e0:	2b78      	cmp	r3, #120	; 0x78
 80013e2:	dc54      	bgt.n	800148e <functionstate+0xba>
 80013e4:	2b30      	cmp	r3, #48	; 0x30
 80013e6:	d002      	beq.n	80013ee <functionstate+0x1a>
 80013e8:	2b31      	cmp	r3, #49	; 0x31
 80013ea:	d041      	beq.n	8001470 <functionstate+0x9c>
 80013ec:	e04f      	b.n	800148e <functionstate+0xba>
	{
	case '0':
		if(RxBuffer[0] == 'a')
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <functionstate+0xf4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b61      	cmp	r3, #97	; 0x61
 80013f4:	d11f      	bne.n	8001436 <functionstate+0x62>
		{
			a += 1;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <functionstate+0xf8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a33      	ldr	r2, [pc, #204]	; (80014cc <functionstate+0xf8>)
 80013fe:	6013      	str	r3, [r2, #0]
			LEDfrequency += 1;
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <functionstate+0xfc>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <functionstate+0xfc>)
 800140a:	701a      	strb	r2, [r3, #0]
			RxBuffer[0] = '\0';
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <functionstate+0xf4>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
			sprintf((char*)TxBuffer,"hz = %d\r\n", a);
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <functionstate+0xf8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	492e      	ldr	r1, [pc, #184]	; (80014d4 <functionstate+0x100>)
 800141a:	482f      	ldr	r0, [pc, #188]	; (80014d8 <functionstate+0x104>)
 800141c:	f003 f8a6 	bl	800456c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8001420:	482d      	ldr	r0, [pc, #180]	; (80014d8 <functionstate+0x104>)
 8001422:	f7fe fedd 	bl	80001e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29b      	uxth	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	492a      	ldr	r1, [pc, #168]	; (80014d8 <functionstate+0x104>)
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <functionstate+0x108>)
 8001430:	f001 fece 	bl	80031d0 <HAL_UART_Transmit_DMA>
		else if(RxBuffer[0] == 'x')
		{
			modecontrol = 'x';
		}

		break;
 8001434:	e03d      	b.n	80014b2 <functionstate+0xde>
		else if(RxBuffer[0] == 's')
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <functionstate+0xf4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b73      	cmp	r3, #115	; 0x73
 800143c:	d106      	bne.n	800144c <functionstate+0x78>
			LEDfrequency -= 1;
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <functionstate+0xfc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3b01      	subs	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <functionstate+0xfc>)
 8001448:	701a      	strb	r2, [r3, #0]
		break;
 800144a:	e032      	b.n	80014b2 <functionstate+0xde>
		else if(RxBuffer[0] == 'd')
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <functionstate+0xf4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d105      	bne.n	8001460 <functionstate+0x8c>
			round += 1;
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <functionstate+0x10c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <functionstate+0x10c>)
 800145c:	6013      	str	r3, [r2, #0]
		break;
 800145e:	e028      	b.n	80014b2 <functionstate+0xde>
		else if(RxBuffer[0] == 'x')
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <functionstate+0xf4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b78      	cmp	r3, #120	; 0x78
 8001466:	d124      	bne.n	80014b2 <functionstate+0xde>
			modecontrol = 'x';
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <functionstate+0xf0>)
 800146a:	2278      	movs	r2, #120	; 0x78
 800146c:	701a      	strb	r2, [r3, #0]
		break;
 800146e:	e020      	b.n	80014b2 <functionstate+0xde>
	case '1':
		CheckRising();
 8001470:	f7ff fdf0 	bl	8001054 <CheckRising>
		if(RxBuffer[0] == 'x')
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <functionstate+0xf4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b78      	cmp	r3, #120	; 0x78
 800147a:	d11c      	bne.n	80014b6 <functionstate+0xe2>
		{
			modecontrol = 'x';
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <functionstate+0xf0>)
 800147e:	2278      	movs	r2, #120	; 0x78
 8001480:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001482:	e018      	b.n	80014b6 <functionstate+0xe2>
	case 'x':
		mainmenu();
 8001484:	f7ff fe66 	bl	8001154 <mainmenu>
		RxBuffer[0] = '\0';
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <functionstate+0xf4>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	default:
		modecontrol = RxBuffer[0];
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <functionstate+0xf4>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <functionstate+0xf0>)
 8001494:	701a      	strb	r2, [r3, #0]
		if(modecontrol == '1')
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <functionstate+0xf0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b31      	cmp	r3, #49	; 0x31
 800149c:	d102      	bne.n	80014a4 <functionstate+0xd0>
		{
			detailscase1();
 800149e:	f7ff ff43 	bl	8001328 <detailscase1>
 80014a2:	e009      	b.n	80014b8 <functionstate+0xe4>
		}
		else if(modecontrol == '0')
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <functionstate+0xf0>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b30      	cmp	r3, #48	; 0x30
 80014aa:	d105      	bne.n	80014b8 <functionstate+0xe4>
		{
			detailscase0();
 80014ac:	f7ff feaa 	bl	8001204 <detailscase0>
 80014b0:	e002      	b.n	80014b8 <functionstate+0xe4>
		break;
 80014b2:	bf00      	nop
 80014b4:	e000      	b.n	80014b8 <functionstate+0xe4>
		break;
 80014b6:	bf00      	nop
		}

	}
	RxBuffer[0]= 0;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <functionstate+0xf4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000001 	.word	0x20000001
 80014c8:	20000198 	.word	0x20000198
 80014cc:	20000264 	.word	0x20000264
 80014d0:	20000003 	.word	0x20000003
 80014d4:	0800503c 	.word	0x0800503c
 80014d8:	2000019c 	.word	0x2000019c
 80014dc:	20000090 	.word	0x20000090
 80014e0:	20000268 	.word	0x20000268

080014e4 <DummyTask>:

void DummyTask()
{
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if (HAL_GetTick()>=timestamp)
 80014e8:	f000 fa78 	bl	80019dc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <DummyTask+0x6c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d32a      	bcc.n	800154c <DummyTask+0x68>
	{
		timestamp = HAL_GetTick()+(1000/(2.0*LEDfrequency));
 80014f6:	f000 fa71 	bl	80019dc <HAL_GetTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f809 	bl	8000514 <__aeabi_ui2d>
 8001502:	4604      	mov	r4, r0
 8001504:	460d      	mov	r5, r1
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <DummyTask+0x70>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f812 	bl	8000534 <__aeabi_i2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	f7fe fec2 	bl	800029c <__adddf3>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	490d      	ldr	r1, [pc, #52]	; (8001558 <DummyTask+0x74>)
 8001522:	f7ff f99b 	bl	800085c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7fe feb5 	bl	800029c <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fa77 	bl	8000a2c <__aeabi_d2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <DummyTask+0x6c>)
 8001542:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001544:	2120      	movs	r1, #32
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <DummyTask+0x78>)
 8001548:	f001 f941 	bl	80027ce <HAL_GPIO_TogglePin>
	}
}
 800154c:	bf00      	nop
 800154e:	bdb0      	pop	{r4, r5, r7, pc}
 8001550:	2000026c 	.word	0x2000026c
 8001554:	20000003 	.word	0x20000003
 8001558:	408f4000 	.word	0x408f4000
 800155c:	40020000 	.word	0x40020000

08001560 <UARTDMAConfig>:

void UARTDMAConfig()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	4903      	ldr	r1, [pc, #12]	; (8001574 <UARTDMAConfig+0x14>)
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <UARTDMAConfig+0x18>)
 800156a:	f001 feaf 	bl	80032cc <HAL_UART_Receive_DMA>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000198 	.word	0x20000198
 8001578:	20000090 	.word	0x20000090

0800157c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_UART_RxCpltCallback+0x24>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d102      	bne.n	8001592 <HAL_UART_RxCpltCallback+0x16>
	{
		//(for string only) Add string stop symbol \0 to end string
		RxBuffer[1] = '\0';
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_UART_RxCpltCallback+0x28>)
 800158e:	2200      	movs	r2, #0
 8001590:	705a      	strb	r2, [r3, #1]
	}
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000090 	.word	0x20000090
 80015a4:	20000198 	.word	0x20000198

080015a8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_UART_TxCpltCallback+0x24>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d102      	bne.n	80015be <HAL_UART_TxCpltCallback+0x16>
		{
		checkstate = 1;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_UART_TxCpltCallback+0x28>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
		}
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000090 	.word	0x20000090
 80015d0:	20000002 	.word	0x20000002

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <HAL_MspInit+0x4c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800161e:	2007      	movs	r0, #7
 8001620:	f000 fadc 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_UART_MspInit+0x150>)
 800164e:	4293      	cmp	r3, r2
 8001650:	f040 8091 	bne.w	8001776 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_UART_MspInit+0x154>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a49      	ldr	r2, [pc, #292]	; (8001784 <HAL_UART_MspInit+0x154>)
 800165e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_UART_MspInit+0x154>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_UART_MspInit+0x154>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a42      	ldr	r2, [pc, #264]	; (8001784 <HAL_UART_MspInit+0x154>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <HAL_UART_MspInit+0x154>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800168c:	230c      	movs	r3, #12
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800169c:	2307      	movs	r3, #7
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4838      	ldr	r0, [pc, #224]	; (8001788 <HAL_UART_MspInit+0x158>)
 80016a8:	f000 fedc 	bl	8002464 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016ae:	4a38      	ldr	r2, [pc, #224]	; (8001790 <HAL_UART_MspInit+0x160>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016ee:	4827      	ldr	r0, [pc, #156]	; (800178c <HAL_UART_MspInit+0x15c>)
 80016f0:	f000 fab6 	bl	8001c60 <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80016fa:	f7ff ff6b 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a22      	ldr	r2, [pc, #136]	; (800178c <HAL_UART_MspInit+0x15c>)
 8001702:	639a      	str	r2, [r3, #56]	; 0x38
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <HAL_UART_MspInit+0x15c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_UART_MspInit+0x164>)
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_UART_MspInit+0x168>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001716:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_UART_MspInit+0x164>)
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_UART_MspInit+0x164>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_UART_MspInit+0x164>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <HAL_UART_MspInit+0x164>)
 800174c:	f000 fa88 	bl	8001c60 <HAL_DMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001756:	f7ff ff3d 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_UART_MspInit+0x164>)
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
 8001760:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <HAL_UART_MspInit+0x164>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2026      	movs	r0, #38	; 0x26
 800176c:	f000 fa41 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001770:	2026      	movs	r0, #38	; 0x26
 8001772:	f000 fa5a 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40004400 	.word	0x40004400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000
 800178c:	200000d4 	.word	0x200000d4
 8001790:	40026088 	.word	0x40026088
 8001794:	20000134 	.word	0x20000134
 8001798:	400260a0 	.word	0x400260a0

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f8e4 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA1_Stream5_IRQHandler+0x10>)
 80017f6:	f000 fbcb 	bl	8001f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200000d4 	.word	0x200000d4

08001804 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Stream6_IRQHandler+0x10>)
 800180a:	f000 fbc1 	bl	8001f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000134 	.word	0x20000134

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f001 fd85 	bl	800332c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000090 	.word	0x20000090

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f002 fe46 	bl	80044ec <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20020000 	.word	0x20020000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000270 	.word	0x20000270
 8001894:	20000288 	.word	0x20000288

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018c2:	490e      	ldr	r1, [pc, #56]	; (80018fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d8:	4c0b      	ldr	r4, [pc, #44]	; (8001908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e6:	f7ff ffd7 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f002 fe05 	bl	80044f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fa3f 	bl	8000d70 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001900:	080050ac 	.word	0x080050ac
  ldr r2, =_sbss
 8001904:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001908:	20000288 	.word	0x20000288

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f94f 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	2000      	movs	r0, #0
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fe4c 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f967 	bl	8001c46 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f92f 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000004 	.word	0x20000004
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	20000274 	.word	0x20000274

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000274 	.word	0x20000274

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff3e 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff31 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff feb6 	bl	80019dc <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e099      	b.n	8001db0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9c:	e00f      	b.n	8001cbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9e:	f7ff fe9d 	bl	80019dc <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d908      	bls.n	8001cbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e078      	b.n	8001db0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e8      	bne.n	8001c9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <HAL_DMA_Init+0x158>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4313      	orrs	r3, r2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f023 0307 	bic.w	r3, r3, #7
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d117      	bne.n	8001d82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00e      	beq.n	8001d82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fb01 	bl	800236c <DMA_CheckFifoParam>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e016      	b.n	8001db0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fab8 	bl	8002300 <DMA_CalcBaseAndBitshift>
 8001d90:	4603      	mov	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	223f      	movs	r2, #63	; 0x3f
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	f010803f 	.word	0xf010803f

08001dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Start_IT+0x26>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e040      	b.n	8001e64 <HAL_DMA_Start_IT+0xa8>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d12f      	bne.n	8001e56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fa4a 	bl	80022a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	223f      	movs	r2, #63	; 0x3f
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0216 	orr.w	r2, r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0208 	orr.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e005      	b.n	8001e62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e7a:	f7ff fdaf 	bl	80019dc <HAL_GetTick>
 8001e7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d008      	beq.n	8001e9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e052      	b.n	8001f44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0216 	bic.w	r2, r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ebc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <HAL_DMA_Abort+0x62>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0208 	bic.w	r2, r2, #8
 8001edc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eee:	e013      	b.n	8001f18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef0:	f7ff fd74 	bl	80019dc <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	d90c      	bls.n	8001f18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e015      	b.n	8001f44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e4      	bne.n	8001ef0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	223f      	movs	r2, #63	; 0x3f
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d004      	beq.n	8001f6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00c      	b.n	8001f84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f9c:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_DMA_IRQHandler+0x248>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a8e      	ldr	r2, [pc, #568]	; (80021dc <HAL_DMA_IRQHandler+0x24c>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0a9b      	lsrs	r3, r3, #10
 8001fa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	2208      	movs	r2, #8
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01a      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0204 	bic.w	r2, r2, #4
 8001fe2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2208      	movs	r2, #8
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2201      	movs	r2, #1
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2201      	movs	r2, #1
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2204      	movs	r2, #4
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2204      	movs	r2, #4
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0204 	orr.w	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2210      	movs	r2, #16
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d043      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03c      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2210      	movs	r2, #16
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
 80020be:	e01f      	b.n	8002100 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
 80020d0:	e016      	b.n	8002100 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0208 	bic.w	r2, r2, #8
 80020ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2220      	movs	r2, #32
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 808f 	beq.w	8002230 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8087 	beq.w	8002230 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2220      	movs	r2, #32
 8002128:	409a      	lsls	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b05      	cmp	r3, #5
 8002138:	d136      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0216 	bic.w	r2, r2, #22
 8002148:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002158:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_DMA_IRQHandler+0x1da>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0208 	bic.w	r2, r2, #8
 8002178:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	223f      	movs	r2, #63	; 0x3f
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07e      	beq.n	800229c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
        }
        return;
 80021a6:	e079      	b.n	800229c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01d      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d031      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e02c      	b.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
 80021d6:	bf00      	nop
 80021d8:	20000004 	.word	0x20000004
 80021dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d023      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e01e      	b.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0210 	bic.w	r2, r2, #16
 800220e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	2b00      	cmp	r3, #0
 8002236:	d032      	beq.n	800229e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d022      	beq.n	800228a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2205      	movs	r2, #5
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d307      	bcc.n	8002278 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f2      	bne.n	800225c <HAL_DMA_IRQHandler+0x2cc>
 8002276:	e000      	b.n	800227a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002278:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e000      	b.n	800229e <HAL_DMA_IRQHandler+0x30e>
        return;
 800229c:	bf00      	nop
    }
  }
}
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b10      	subs	r3, #16
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <DMA_CalcBaseAndBitshift+0x64>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <DMA_CalcBaseAndBitshift+0x68>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d909      	bls.n	8002342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
 8002340:	e007      	b.n	8002352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	08005060 	.word	0x08005060

0800236c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11f      	bne.n	80023c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d856      	bhi.n	800243a <DMA_CheckFifoParam+0xce>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x28>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b7 	.word	0x080023b7
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	0800243b 	.word	0x0800243b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d046      	beq.n	800243e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e043      	b.n	800243e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023be:	d140      	bne.n	8002442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e03d      	b.n	8002442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d121      	bne.n	8002414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d837      	bhi.n	8002446 <DMA_CheckFifoParam+0xda>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <DMA_CheckFifoParam+0x70>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	080023ed 	.word	0x080023ed
 80023e0:	080023f3 	.word	0x080023f3
 80023e4:	080023ed 	.word	0x080023ed
 80023e8:	08002405 	.word	0x08002405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e030      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d025      	beq.n	800244a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e022      	b.n	800244a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002412:	e01c      	b.n	800244e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d903      	bls.n	8002422 <DMA_CheckFifoParam+0xb6>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002420:	e018      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      break;
 8002426:	e015      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e00b      	b.n	8002452 <DMA_CheckFifoParam+0xe6>
      break;
 800243a:	bf00      	nop
 800243c:	e00a      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e008      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e006      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;   
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
    }
  } 
  
  return status; 
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e159      	b.n	8002734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8148 	bne.w	800272e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a2 	beq.w	800272e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x2ec>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a49      	ldr	r2, [pc, #292]	; (8002754 <HAL_GPIO_Init+0x2f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x202>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_GPIO_Init+0x2f4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x1fe>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a47      	ldr	r2, [pc, #284]	; (800275c <HAL_GPIO_Init+0x2f8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x1fa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a46      	ldr	r2, [pc, #280]	; (8002760 <HAL_GPIO_Init+0x2fc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x1f6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a45      	ldr	r2, [pc, #276]	; (8002764 <HAL_GPIO_Init+0x300>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x1f2>
 8002652:	2304      	movs	r3, #4
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002656:	2307      	movs	r3, #7
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002666:	2300      	movs	r3, #0
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f002 0203 	and.w	r2, r2, #3
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	; (8002750 <HAL_GPIO_Init+0x2ec>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_GPIO_Init+0x304>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	f67f aea2 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40013c00 	.word	0x40013c00

0800276c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e001      	b.n	800278e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e0:	887a      	ldrh	r2, [r7, #2]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	041a      	lsls	r2, r3, #16
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	400b      	ands	r3, r1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e267      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d075      	beq.n	800290e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00c      	beq.n	8002848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002836:	2b08      	cmp	r3, #8
 8002838:	d112      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283a:	4b82      	ldr	r3, [pc, #520]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002846:	d10b      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05b      	beq.n	800290c <HAL_RCC_OscConfig+0x108>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d157      	bne.n	800290c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e242      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d106      	bne.n	8002878 <HAL_RCC_OscConfig+0x74>
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a75      	ldr	r2, [pc, #468]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x98>
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6f      	ldr	r2, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6c      	ldr	r2, [pc, #432]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 800289c:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff f88e 	bl	80019dc <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff f88a 	bl	80019dc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e207      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xc0>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff f87a 	bl	80019dc <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff f876 	bl	80019dc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1f3      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0xe8>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1c7      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_OscConfig+0x244>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7ff f82f 	bl	80019dc <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002982:	f7ff f82b 	bl	80019dc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1a8      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4925      	ldr	r1, [pc, #148]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCC_OscConfig+0x244>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7ff f80e 	bl	80019dc <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c4:	f7ff f80a 	bl	80019dc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e187      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d036      	beq.n	8002a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_OscConfig+0x248>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe ffee 	bl	80019dc <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe ffea 	bl	80019dc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e167      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x200>
 8002a22:	e01b      	b.n	8002a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_OscConfig+0x248>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe ffd7 	bl	80019dc <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	e00e      	b.n	8002a50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe ffd3 	bl	80019dc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d907      	bls.n	8002a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e150      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470000 	.word	0x42470000
 8002a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ea      	bne.n	8002a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8097 	beq.w	8002b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a7c      	ldr	r2, [pc, #496]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b77      	ldr	r3, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a73      	ldr	r2, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe ff93 	bl	80019dc <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe ff8f 	bl	80019dc <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e10c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x2ea>
 8002ae0:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e01c      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x30c>
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a5e      	ldr	r2, [pc, #376]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a5b      	ldr	r2, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002b10:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe ff54 	bl	80019dc <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe ff50 	bl	80019dc <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0cb      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <HAL_RCC_OscConfig+0x334>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fe ff3e 	bl	80019dc <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe ff3a 	bl	80019dc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0b5      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a1 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d05c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d141      	bne.n	8002c3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe ff0e 	bl	80019dc <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe ff0a 	bl	80019dc <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e087      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	491b      	ldr	r1, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fee3 	bl	80019dc <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fedf 	bl	80019dc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e05c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x416>
 8002c38:	e054      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fecc 	bl	80019dc <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fec8 	bl	80019dc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e045      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x444>
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e038      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4ec>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d121      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11a      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0cc      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d90c      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b65      	ldr	r3, [pc, #404]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a58      	ldr	r2, [pc, #352]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	494d      	ldr	r1, [pc, #308]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d044      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d119      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d003      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e067      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4934      	ldr	r1, [pc, #208]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fdfa 	bl	80019dc <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe fdf6 	bl	80019dc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d20c      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e032      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4916      	ldr	r1, [pc, #88]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7a:	f000 f821 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490a      	ldr	r1, [pc, #40]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fd5a 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08005048 	.word	0x08005048
 8002eb8:	20000004 	.word	0x20000004
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec4:	b094      	sub	sp, #80	; 0x50
 8002ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ecc:	2300      	movs	r3, #0
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed8:	4b79      	ldr	r3, [pc, #484]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	f200 80e1 	bhi.w	80030ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef2:	e0db      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ef8:	e0db      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efe:	e0d8      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f00:	4b6f      	ldr	r3, [pc, #444]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d063      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f16:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	0159      	lsls	r1, r3, #5
 8002f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f44:	0150      	lsls	r0, r2, #5
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	1a51      	subs	r1, r2, r1
 8002f4e:	6139      	str	r1, [r7, #16]
 8002f50:	4629      	mov	r1, r5
 8002f52:	eb63 0301 	sbc.w	r3, r3, r1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f64:	4659      	mov	r1, fp
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6e:	4651      	mov	r1, sl
 8002f70:	018a      	lsls	r2, r1, #6
 8002f72:	4651      	mov	r1, sl
 8002f74:	ebb2 0801 	subs.w	r8, r2, r1
 8002f78:	4659      	mov	r1, fp
 8002f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f92:	4690      	mov	r8, r2
 8002f94:	4699      	mov	r9, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	eb18 0303 	adds.w	r3, r8, r3
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	eb49 0303 	adc.w	r3, r9, r3
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	024b      	lsls	r3, r1, #9
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	024a      	lsls	r2, r1, #9
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd0:	f7fd fd4c 	bl	8000a6c <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fdc:	e058      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	4611      	mov	r1, r2
 8002fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	f04f 0000 	mov.w	r0, #0
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	0159      	lsls	r1, r3, #5
 8003006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300a:	0150      	lsls	r0, r2, #5
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4641      	mov	r1, r8
 8003012:	ebb2 0a01 	subs.w	sl, r2, r1
 8003016:	4649      	mov	r1, r9
 8003018:	eb63 0b01 	sbc.w	fp, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800302c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003030:	ebb2 040a 	subs.w	r4, r2, sl
 8003034:	eb63 050b 	sbc.w	r5, r3, fp
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	00eb      	lsls	r3, r5, #3
 8003042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003046:	00e2      	lsls	r2, r4, #3
 8003048:	4614      	mov	r4, r2
 800304a:	461d      	mov	r5, r3
 800304c:	4643      	mov	r3, r8
 800304e:	18e3      	adds	r3, r4, r3
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	464b      	mov	r3, r9
 8003054:	eb45 0303 	adc.w	r3, r5, r3
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003066:	4629      	mov	r1, r5
 8003068:	028b      	lsls	r3, r1, #10
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003070:	4621      	mov	r1, r4
 8003072:	028a      	lsls	r2, r1, #10
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	2200      	movs	r2, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	61fa      	str	r2, [r7, #28]
 8003080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003084:	f7fd fcf2 	bl	8000a6c <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4613      	mov	r3, r2
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3750      	adds	r7, #80	; 0x50
 80030b8:	46bd      	mov	sp, r7
 80030ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	08005058 	.word	0x08005058

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff ffdc 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0b5b      	lsrs	r3, r3, #13
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	08005058 	.word	0x08005058

08003134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e03f      	b.n	80031c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe fa68 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ff43 	bl	8004004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d165      	bne.n	80032b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_UART_Transmit_DMA+0x26>
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e05e      	b.n	80032b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_UART_Transmit_DMA+0x38>
 8003204:	2302      	movs	r3, #2
 8003206:	e057      	b.n	80032b8 <HAL_UART_Transmit_DMA+0xe8>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <HAL_UART_Transmit_DMA+0xf0>)
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <HAL_UART_Transmit_DMA+0xf4>)
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <HAL_UART_Transmit_DMA+0xf8>)
 8003246:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	2200      	movs	r2, #0
 800324e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3304      	adds	r3, #4
 8003264:	461a      	mov	r2, r3
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	f7fe fda8 	bl	8001dbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003274:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3314      	adds	r3, #20
 8003284:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	617b      	str	r3, [r7, #20]
   return(result);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3314      	adds	r3, #20
 800329c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329e:	627a      	str	r2, [r7, #36]	; 0x24
 80032a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e5      	bne.n	800327e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3730      	adds	r7, #48	; 0x30
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	0800389d 	.word	0x0800389d
 80032c4:	08003937 	.word	0x08003937
 80032c8:	08003aaf 	.word	0x08003aaf

080032cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d11d      	bne.n	8003322 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_Receive_DMA+0x26>
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e016      	b.n	8003324 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Receive_DMA+0x38>
 8003300:	2302      	movs	r3, #2
 8003302:	e00f      	b.n	8003324 <HAL_UART_Receive_DMA+0x58>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	461a      	mov	r2, r3
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fc13 	bl	8003b44 <UART_Start_Receive_DMA>
 800331e:	4603      	mov	r3, r0
 8003320:	e000      	b.n	8003324 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b0ba      	sub	sp, #232	; 0xe8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800336a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_UART_IRQHandler+0x66>
 800337e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fd7f 	bl	8003e8e <UART_Receive_IT>
      return;
 8003390:	e256      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80de 	beq.w	8003558 <HAL_UART_IRQHandler+0x22c>
 800339c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80d1 	beq.w	8003558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_UART_IRQHandler+0xae>
 80033c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_UART_IRQHandler+0xd2>
 80033e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_UART_IRQHandler+0xf6>
 800340a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d011      	beq.n	8003452 <HAL_UART_IRQHandler+0x126>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0208 	orr.w	r2, r3, #8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 81ed 	beq.w	8003836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800345c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x14e>
 8003468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fd0a 	bl	8003e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_UART_IRQHandler+0x17a>
 800349e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04f      	beq.n	8003546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fc12 	bl	8003cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d141      	bne.n	800353e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1d9      	bne.n	80034ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d013      	beq.n	8003536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4a7d      	ldr	r2, [pc, #500]	; (8003708 <HAL_UART_IRQHandler+0x3dc>)
 8003514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fd16 	bl	8001f4c <HAL_DMA_Abort_IT>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003530:	4610      	mov	r0, r2
 8003532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	e00e      	b.n	8003554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f99a 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e00a      	b.n	8003554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f996 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e006      	b.n	8003554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f992 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003552:	e170      	b.n	8003836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	bf00      	nop
    return;
 8003556:	e16e      	b.n	8003836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 814a 	bne.w	80037f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8143 	beq.w	80037f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 813c 	beq.w	80037f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	f040 80b4 	bne.w	800370c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8140 	beq.w	800383a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035c2:	429a      	cmp	r2, r3
 80035c4:	f080 8139 	bcs.w	800383a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035da:	f000 8088 	beq.w	80036ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800360a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800360e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1d9      	bne.n	80035de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800363a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e1      	bne.n	800362a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800368a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800368c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e3      	bne.n	8003666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036be:	f023 0310 	bic.w	r3, r3, #16
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80036d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e3      	bne.n	80036ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fbbf 	bl	8001e6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8c0 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003704:	e099      	b.n	800383a <HAL_UART_IRQHandler+0x50e>
 8003706:	bf00      	nop
 8003708:	08003d97 	.word	0x08003d97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003714:	b29b      	uxth	r3, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 808b 	beq.w	800383e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8086 	beq.w	800383e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003756:	647a      	str	r2, [r7, #68]	; 0x44
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800375c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e3      	bne.n	8003732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3314      	adds	r3, #20
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	623b      	str	r3, [r7, #32]
   return(result);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800378e:	633a      	str	r2, [r7, #48]	; 0x30
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e3      	bne.n	800376a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037d4:	61fa      	str	r2, [r7, #28]
 80037d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	617b      	str	r3, [r7, #20]
   return(result);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e3      	bne.n	80037b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f848 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037f4:	e023      	b.n	800383e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_UART_IRQHandler+0x4ea>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fad5 	bl	8003dbe <UART_Transmit_IT>
    return;
 8003814:	e014      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <HAL_UART_IRQHandler+0x514>
 8003822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb15 	bl	8003e5e <UART_EndTransmit_IT>
    return;
 8003834:	e004      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
    return;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
      return;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
      return;
 800383e:	bf00      	nop
  }
}
 8003840:	37e8      	adds	r7, #232	; 0xe8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop

08003848 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b090      	sub	sp, #64	; 0x40
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d137      	bne.n	8003928 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	2200      	movs	r2, #0
 80038bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	623b      	str	r3, [r7, #32]
   return(result);
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038de:	633a      	str	r2, [r7, #48]	; 0x30
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e5      	bne.n	80038be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	60fb      	str	r3, [r7, #12]
   return(result);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003912:	61fa      	str	r2, [r7, #28]
 8003914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	617b      	str	r3, [r7, #20]
   return(result);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e5      	bne.n	80038f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003926:	e002      	b.n	800392e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003928:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800392a:	f7fd fe3d 	bl	80015a8 <HAL_UART_TxCpltCallback>
}
 800392e:	bf00      	nop
 8003930:	3740      	adds	r7, #64	; 0x40
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff ff7f 	bl	8003848 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b09c      	sub	sp, #112	; 0x70
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d172      	bne.n	8003a54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	2200      	movs	r2, #0
 8003972:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800398a:	66bb      	str	r3, [r7, #104]	; 0x68
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003994:	65ba      	str	r2, [r7, #88]	; 0x58
 8003996:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800399a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	667b      	str	r3, [r7, #100]	; 0x64
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039c8:	647a      	str	r2, [r7, #68]	; 0x44
 80039ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	623b      	str	r3, [r7, #32]
   return(result);
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f2:	663b      	str	r3, [r7, #96]	; 0x60
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039fc:	633a      	str	r2, [r7, #48]	; 0x30
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d119      	bne.n	8003a54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0310 	bic.w	r3, r3, #16
 8003a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a40:	61fa      	str	r2, [r7, #28]
 8003a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e5      	bne.n	8003a20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a60:	4619      	mov	r1, r3
 8003a62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a64:	f7ff ff0e 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a68:	e002      	b.n	8003a70 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a6c:	f7fd fd86 	bl	800157c <HAL_UART_RxCpltCallback>
}
 8003a70:	bf00      	nop
 8003a72:	3770      	adds	r7, #112	; 0x70
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4619      	mov	r1, r3
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fef3 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a9e:	e002      	b.n	8003aa6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff fedb 	bl	800385c <HAL_UART_RxHalfCpltCallback>
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b21      	cmp	r3, #33	; 0x21
 8003ae0:	d108      	bne.n	8003af4 <UART_DMAError+0x46>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003aee:	68b8      	ldr	r0, [r7, #8]
 8003af0:	f000 f8c6 	bl	8003c80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b22      	cmp	r3, #34	; 0x22
 8003b14:	d108      	bne.n	8003b28 <UART_DMAError+0x7a>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f000 f8d4 	bl	8003cd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f7ff fe9b 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b098      	sub	sp, #96	; 0x60
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2222      	movs	r2, #34	; 0x22
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4a40      	ldr	r2, [pc, #256]	; (8003c74 <UART_Start_Receive_DMA+0x130>)
 8003b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4a3f      	ldr	r2, [pc, #252]	; (8003c78 <UART_Start_Receive_DMA+0x134>)
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	4a3e      	ldr	r2, [pc, #248]	; (8003c7c <UART_Start_Receive_DMA+0x138>)
 8003b82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2200      	movs	r2, #0
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	f7fe f90a 	bl	8001dbc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d019      	beq.n	8003c02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e5      	bne.n	8003bce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c22:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e5      	bne.n	8003c02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	617b      	str	r3, [r7, #20]
   return(result);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c56:	627a      	str	r2, [r7, #36]	; 0x24
 8003c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6a39      	ldr	r1, [r7, #32]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3760      	adds	r7, #96	; 0x60
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	08003953 	.word	0x08003953
 8003c78:	08003a79 	.word	0x08003a79
 8003c7c:	08003aaf 	.word	0x08003aaf

08003c80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	61ba      	str	r2, [r7, #24]
 8003caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6979      	ldr	r1, [r7, #20]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cc4:	bf00      	nop
 8003cc6:	3724      	adds	r7, #36	; 0x24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b095      	sub	sp, #84	; 0x54
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cf8:	643a      	str	r2, [r7, #64]	; 0x40
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d119      	bne.n	8003d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d68:	61ba      	str	r2, [r7, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	613b      	str	r3, [r7, #16]
   return(result);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d8a:	bf00      	nop
 8003d8c:	3754      	adds	r7, #84	; 0x54
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff fd5d 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b21      	cmp	r3, #33	; 0x21
 8003dd0:	d13e      	bne.n	8003e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d114      	bne.n	8003e06 <UART_Transmit_IT+0x48>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d110      	bne.n	8003e06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	621a      	str	r2, [r3, #32]
 8003e04:	e008      	b.n	8003e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6211      	str	r1, [r2, #32]
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4619      	mov	r1, r3
 8003e26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd fb92 	bl	80015a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08c      	sub	sp, #48	; 0x30
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b22      	cmp	r3, #34	; 0x22
 8003ea0:	f040 80ab 	bne.w	8003ffa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	d117      	bne.n	8003ede <UART_Receive_IT+0x50>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d113      	bne.n	8003ede <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
 8003edc:	e026      	b.n	8003f2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d007      	beq.n	8003f02 <UART_Receive_IT+0x74>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <UART_Receive_IT+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e008      	b.n	8003f22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d15a      	bne.n	8003ff6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0220 	bic.w	r2, r2, #32
 8003f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d135      	bne.n	8003fec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	613b      	str	r3, [r7, #16]
   return(result);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f023 0310 	bic.w	r3, r3, #16
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	623a      	str	r2, [r7, #32]
 8003fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	69f9      	ldr	r1, [r7, #28]
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d10a      	bne.n	8003fde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fc4d 	bl	8003884 <HAL_UARTEx_RxEventCallback>
 8003fea:	e002      	b.n	8003ff2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd fac5 	bl	800157c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e002      	b.n	8003ffc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3730      	adds	r7, #48	; 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b0c0      	sub	sp, #256	; 0x100
 800400a:	af00      	add	r7, sp, #0
 800400c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	68d9      	ldr	r1, [r3, #12]
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	ea40 0301 	orr.w	r3, r0, r1
 800402c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800405c:	f021 010c 	bic.w	r1, r1, #12
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800406a:	430b      	orrs	r3, r1
 800406c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407e:	6999      	ldr	r1, [r3, #24]
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	ea40 0301 	orr.w	r3, r0, r1
 800408a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b8f      	ldr	r3, [pc, #572]	; (80042d0 <UART_SetConfig+0x2cc>)
 8004094:	429a      	cmp	r2, r3
 8004096:	d005      	beq.n	80040a4 <UART_SetConfig+0xa0>
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b8d      	ldr	r3, [pc, #564]	; (80042d4 <UART_SetConfig+0x2d0>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d104      	bne.n	80040ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7ff f832 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80040a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040ac:	e003      	b.n	80040b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ae:	f7ff f819 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80040b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	f040 810c 	bne.w	80042dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	1891      	adds	r1, r2, r2
 80040dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80040de:	415b      	adcs	r3, r3
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040e6:	4621      	mov	r1, r4
 80040e8:	eb12 0801 	adds.w	r8, r2, r1
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb43 0901 	adc.w	r9, r3, r1
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004106:	4690      	mov	r8, r2
 8004108:	4699      	mov	r9, r3
 800410a:	4623      	mov	r3, r4
 800410c:	eb18 0303 	adds.w	r3, r8, r3
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004114:	462b      	mov	r3, r5
 8004116:	eb49 0303 	adc.w	r3, r9, r3
 800411a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800412a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800412e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004132:	460b      	mov	r3, r1
 8004134:	18db      	adds	r3, r3, r3
 8004136:	653b      	str	r3, [r7, #80]	; 0x50
 8004138:	4613      	mov	r3, r2
 800413a:	eb42 0303 	adc.w	r3, r2, r3
 800413e:	657b      	str	r3, [r7, #84]	; 0x54
 8004140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004148:	f7fc fc90 	bl	8000a6c <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <UART_SetConfig+0x2d4>)
 8004152:	fba3 2302 	umull	r2, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	011c      	lsls	r4, r3, #4
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004164:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	64b9      	str	r1, [r7, #72]	; 0x48
 8004174:	415b      	adcs	r3, r3
 8004176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800417c:	4641      	mov	r1, r8
 800417e:	eb12 0a01 	adds.w	sl, r2, r1
 8004182:	4649      	mov	r1, r9
 8004184:	eb43 0b01 	adc.w	fp, r3, r1
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800419c:	4692      	mov	sl, r2
 800419e:	469b      	mov	fp, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	eb1a 0303 	adds.w	r3, sl, r3
 80041a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041aa:	464b      	mov	r3, r9
 80041ac:	eb4b 0303 	adc.w	r3, fp, r3
 80041b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041c8:	460b      	mov	r3, r1
 80041ca:	18db      	adds	r3, r3, r3
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
 80041ce:	4613      	mov	r3, r2
 80041d0:	eb42 0303 	adc.w	r3, r2, r3
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
 80041d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041de:	f7fc fc45 	bl	8000a6c <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2301 	umull	r2, r3, r3, r1
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2264      	movs	r2, #100	; 0x64
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	1acb      	subs	r3, r1, r3
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041fe:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <UART_SetConfig+0x2d4>)
 8004200:	fba3 2302 	umull	r2, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800420c:	441c      	add	r4, r3
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800421c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	63b9      	str	r1, [r7, #56]	; 0x38
 8004228:	415b      	adcs	r3, r3
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6339      	str	r1, [r7, #48]	; 0x30
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800427c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004284:	460b      	mov	r3, r1
 8004286:	18db      	adds	r3, r3, r3
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
 800428a:	4613      	mov	r3, r2
 800428c:	eb42 0303 	adc.w	r3, r2, r3
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800429a:	f7fc fbe7 	bl	8000a6c <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <UART_SetConfig+0x2d4>)
 80042a4:	fba3 1302 	umull	r1, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	2164      	movs	r1, #100	; 0x64
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	3332      	adds	r3, #50	; 0x32
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <UART_SetConfig+0x2d4>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 0207 	and.w	r2, r3, #7
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4422      	add	r2, r4
 80042ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042cc:	e105      	b.n	80044da <UART_SetConfig+0x4d6>
 80042ce:	bf00      	nop
 80042d0:	40011000 	.word	0x40011000
 80042d4:	40011400 	.word	0x40011400
 80042d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	6239      	str	r1, [r7, #32]
 80042f6:	415b      	adcs	r3, r3
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
 80042fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042fe:	4641      	mov	r1, r8
 8004300:	1854      	adds	r4, r2, r1
 8004302:	4649      	mov	r1, r9
 8004304:	eb43 0501 	adc.w	r5, r3, r1
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	00eb      	lsls	r3, r5, #3
 8004312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004316:	00e2      	lsls	r2, r4, #3
 8004318:	4614      	mov	r4, r2
 800431a:	461d      	mov	r5, r3
 800431c:	4643      	mov	r3, r8
 800431e:	18e3      	adds	r3, r4, r3
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004324:	464b      	mov	r3, r9
 8004326:	eb45 0303 	adc.w	r3, r5, r3
 800432a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800433a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800434a:	4629      	mov	r1, r5
 800434c:	008b      	lsls	r3, r1, #2
 800434e:	4621      	mov	r1, r4
 8004350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004354:	4621      	mov	r1, r4
 8004356:	008a      	lsls	r2, r1, #2
 8004358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800435c:	f7fc fb86 	bl	8000a6c <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <UART_SetConfig+0x4e4>)
 8004366:	fba3 2302 	umull	r2, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	011c      	lsls	r4, r3, #4
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800437c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004380:	4642      	mov	r2, r8
 8004382:	464b      	mov	r3, r9
 8004384:	1891      	adds	r1, r2, r2
 8004386:	61b9      	str	r1, [r7, #24]
 8004388:	415b      	adcs	r3, r3
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004390:	4641      	mov	r1, r8
 8004392:	1851      	adds	r1, r2, r1
 8004394:	6139      	str	r1, [r7, #16]
 8004396:	4649      	mov	r1, r9
 8004398:	414b      	adcs	r3, r1
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a8:	4659      	mov	r1, fp
 80043aa:	00cb      	lsls	r3, r1, #3
 80043ac:	4651      	mov	r1, sl
 80043ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b2:	4651      	mov	r1, sl
 80043b4:	00ca      	lsls	r2, r1, #3
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	4642      	mov	r2, r8
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043c4:	464b      	mov	r3, r9
 80043c6:	460a      	mov	r2, r1
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043e8:	4649      	mov	r1, r9
 80043ea:	008b      	lsls	r3, r1, #2
 80043ec:	4641      	mov	r1, r8
 80043ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f2:	4641      	mov	r1, r8
 80043f4:	008a      	lsls	r2, r1, #2
 80043f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043fa:	f7fc fb37 	bl	8000a6c <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <UART_SetConfig+0x4e4>)
 8004404:	fba3 1302 	umull	r1, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	2164      	movs	r1, #100	; 0x64
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	3332      	adds	r3, #50	; 0x32
 8004416:	4a34      	ldr	r2, [pc, #208]	; (80044e8 <UART_SetConfig+0x4e4>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004422:	441c      	add	r4, r3
 8004424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004428:	2200      	movs	r2, #0
 800442a:	673b      	str	r3, [r7, #112]	; 0x70
 800442c:	677a      	str	r2, [r7, #116]	; 0x74
 800442e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004432:	4642      	mov	r2, r8
 8004434:	464b      	mov	r3, r9
 8004436:	1891      	adds	r1, r2, r2
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	415b      	adcs	r3, r3
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004442:	4641      	mov	r1, r8
 8004444:	1851      	adds	r1, r2, r1
 8004446:	6039      	str	r1, [r7, #0]
 8004448:	4649      	mov	r1, r9
 800444a:	414b      	adcs	r3, r1
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800445a:	4659      	mov	r1, fp
 800445c:	00cb      	lsls	r3, r1, #3
 800445e:	4651      	mov	r1, sl
 8004460:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004464:	4651      	mov	r1, sl
 8004466:	00ca      	lsls	r2, r1, #3
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	4603      	mov	r3, r0
 800446e:	4642      	mov	r2, r8
 8004470:	189b      	adds	r3, r3, r2
 8004472:	66bb      	str	r3, [r7, #104]	; 0x68
 8004474:	464b      	mov	r3, r9
 8004476:	460a      	mov	r2, r1
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	663b      	str	r3, [r7, #96]	; 0x60
 8004488:	667a      	str	r2, [r7, #100]	; 0x64
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004496:	4649      	mov	r1, r9
 8004498:	008b      	lsls	r3, r1, #2
 800449a:	4641      	mov	r1, r8
 800449c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a0:	4641      	mov	r1, r8
 80044a2:	008a      	lsls	r2, r1, #2
 80044a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044a8:	f7fc fae0 	bl	8000a6c <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <UART_SetConfig+0x4e4>)
 80044b2:	fba3 1302 	umull	r1, r3, r3, r2
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2164      	movs	r1, #100	; 0x64
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	3332      	adds	r3, #50	; 0x32
 80044c4:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <UART_SetConfig+0x4e4>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	f003 020f 	and.w	r2, r3, #15
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4422      	add	r2, r4
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e6:	bf00      	nop
 80044e8:	51eb851f 	.word	0x51eb851f

080044ec <__errno>:
 80044ec:	4b01      	ldr	r3, [pc, #4]	; (80044f4 <__errno+0x8>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000010 	.word	0x20000010

080044f8 <__libc_init_array>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4d0d      	ldr	r5, [pc, #52]	; (8004530 <__libc_init_array+0x38>)
 80044fc:	4c0d      	ldr	r4, [pc, #52]	; (8004534 <__libc_init_array+0x3c>)
 80044fe:	1b64      	subs	r4, r4, r5
 8004500:	10a4      	asrs	r4, r4, #2
 8004502:	2600      	movs	r6, #0
 8004504:	42a6      	cmp	r6, r4
 8004506:	d109      	bne.n	800451c <__libc_init_array+0x24>
 8004508:	4d0b      	ldr	r5, [pc, #44]	; (8004538 <__libc_init_array+0x40>)
 800450a:	4c0c      	ldr	r4, [pc, #48]	; (800453c <__libc_init_array+0x44>)
 800450c:	f000 fc8e 	bl	8004e2c <_init>
 8004510:	1b64      	subs	r4, r4, r5
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	2600      	movs	r6, #0
 8004516:	42a6      	cmp	r6, r4
 8004518:	d105      	bne.n	8004526 <__libc_init_array+0x2e>
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004520:	4798      	blx	r3
 8004522:	3601      	adds	r6, #1
 8004524:	e7ee      	b.n	8004504 <__libc_init_array+0xc>
 8004526:	f855 3b04 	ldr.w	r3, [r5], #4
 800452a:	4798      	blx	r3
 800452c:	3601      	adds	r6, #1
 800452e:	e7f2      	b.n	8004516 <__libc_init_array+0x1e>
 8004530:	080050a4 	.word	0x080050a4
 8004534:	080050a4 	.word	0x080050a4
 8004538:	080050a4 	.word	0x080050a4
 800453c:	080050a8 	.word	0x080050a8

08004540 <memcpy>:
 8004540:	440a      	add	r2, r1
 8004542:	4291      	cmp	r1, r2
 8004544:	f100 33ff 	add.w	r3, r0, #4294967295
 8004548:	d100      	bne.n	800454c <memcpy+0xc>
 800454a:	4770      	bx	lr
 800454c:	b510      	push	{r4, lr}
 800454e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004556:	4291      	cmp	r1, r2
 8004558:	d1f9      	bne.n	800454e <memcpy+0xe>
 800455a:	bd10      	pop	{r4, pc}

0800455c <memset>:
 800455c:	4402      	add	r2, r0
 800455e:	4603      	mov	r3, r0
 8004560:	4293      	cmp	r3, r2
 8004562:	d100      	bne.n	8004566 <memset+0xa>
 8004564:	4770      	bx	lr
 8004566:	f803 1b01 	strb.w	r1, [r3], #1
 800456a:	e7f9      	b.n	8004560 <memset+0x4>

0800456c <siprintf>:
 800456c:	b40e      	push	{r1, r2, r3}
 800456e:	b500      	push	{lr}
 8004570:	b09c      	sub	sp, #112	; 0x70
 8004572:	ab1d      	add	r3, sp, #116	; 0x74
 8004574:	9002      	str	r0, [sp, #8]
 8004576:	9006      	str	r0, [sp, #24]
 8004578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800457c:	4809      	ldr	r0, [pc, #36]	; (80045a4 <siprintf+0x38>)
 800457e:	9107      	str	r1, [sp, #28]
 8004580:	9104      	str	r1, [sp, #16]
 8004582:	4909      	ldr	r1, [pc, #36]	; (80045a8 <siprintf+0x3c>)
 8004584:	f853 2b04 	ldr.w	r2, [r3], #4
 8004588:	9105      	str	r1, [sp, #20]
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	a902      	add	r1, sp, #8
 8004590:	f000 f868 	bl	8004664 <_svfiprintf_r>
 8004594:	9b02      	ldr	r3, [sp, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	b01c      	add	sp, #112	; 0x70
 800459c:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a0:	b003      	add	sp, #12
 80045a2:	4770      	bx	lr
 80045a4:	20000010 	.word	0x20000010
 80045a8:	ffff0208 	.word	0xffff0208

080045ac <__ssputs_r>:
 80045ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	688e      	ldr	r6, [r1, #8]
 80045b2:	429e      	cmp	r6, r3
 80045b4:	4682      	mov	sl, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	4690      	mov	r8, r2
 80045ba:	461f      	mov	r7, r3
 80045bc:	d838      	bhi.n	8004630 <__ssputs_r+0x84>
 80045be:	898a      	ldrh	r2, [r1, #12]
 80045c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045c4:	d032      	beq.n	800462c <__ssputs_r+0x80>
 80045c6:	6825      	ldr	r5, [r4, #0]
 80045c8:	6909      	ldr	r1, [r1, #16]
 80045ca:	eba5 0901 	sub.w	r9, r5, r1
 80045ce:	6965      	ldr	r5, [r4, #20]
 80045d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045d8:	3301      	adds	r3, #1
 80045da:	444b      	add	r3, r9
 80045dc:	106d      	asrs	r5, r5, #1
 80045de:	429d      	cmp	r5, r3
 80045e0:	bf38      	it	cc
 80045e2:	461d      	movcc	r5, r3
 80045e4:	0553      	lsls	r3, r2, #21
 80045e6:	d531      	bpl.n	800464c <__ssputs_r+0xa0>
 80045e8:	4629      	mov	r1, r5
 80045ea:	f000 fb55 	bl	8004c98 <_malloc_r>
 80045ee:	4606      	mov	r6, r0
 80045f0:	b950      	cbnz	r0, 8004608 <__ssputs_r+0x5c>
 80045f2:	230c      	movs	r3, #12
 80045f4:	f8ca 3000 	str.w	r3, [sl]
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004608:	6921      	ldr	r1, [r4, #16]
 800460a:	464a      	mov	r2, r9
 800460c:	f7ff ff98 	bl	8004540 <memcpy>
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461a:	81a3      	strh	r3, [r4, #12]
 800461c:	6126      	str	r6, [r4, #16]
 800461e:	6165      	str	r5, [r4, #20]
 8004620:	444e      	add	r6, r9
 8004622:	eba5 0509 	sub.w	r5, r5, r9
 8004626:	6026      	str	r6, [r4, #0]
 8004628:	60a5      	str	r5, [r4, #8]
 800462a:	463e      	mov	r6, r7
 800462c:	42be      	cmp	r6, r7
 800462e:	d900      	bls.n	8004632 <__ssputs_r+0x86>
 8004630:	463e      	mov	r6, r7
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	4632      	mov	r2, r6
 8004636:	4641      	mov	r1, r8
 8004638:	f000 faa8 	bl	8004b8c <memmove>
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	1b9b      	subs	r3, r3, r6
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	4433      	add	r3, r6
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	2000      	movs	r0, #0
 800464a:	e7db      	b.n	8004604 <__ssputs_r+0x58>
 800464c:	462a      	mov	r2, r5
 800464e:	f000 fb97 	bl	8004d80 <_realloc_r>
 8004652:	4606      	mov	r6, r0
 8004654:	2800      	cmp	r0, #0
 8004656:	d1e1      	bne.n	800461c <__ssputs_r+0x70>
 8004658:	6921      	ldr	r1, [r4, #16]
 800465a:	4650      	mov	r0, sl
 800465c:	f000 fab0 	bl	8004bc0 <_free_r>
 8004660:	e7c7      	b.n	80045f2 <__ssputs_r+0x46>
	...

08004664 <_svfiprintf_r>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	4698      	mov	r8, r3
 800466a:	898b      	ldrh	r3, [r1, #12]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	b09d      	sub	sp, #116	; 0x74
 8004670:	4607      	mov	r7, r0
 8004672:	460d      	mov	r5, r1
 8004674:	4614      	mov	r4, r2
 8004676:	d50e      	bpl.n	8004696 <_svfiprintf_r+0x32>
 8004678:	690b      	ldr	r3, [r1, #16]
 800467a:	b963      	cbnz	r3, 8004696 <_svfiprintf_r+0x32>
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	f000 fb0b 	bl	8004c98 <_malloc_r>
 8004682:	6028      	str	r0, [r5, #0]
 8004684:	6128      	str	r0, [r5, #16]
 8004686:	b920      	cbnz	r0, 8004692 <_svfiprintf_r+0x2e>
 8004688:	230c      	movs	r3, #12
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	e0d1      	b.n	8004836 <_svfiprintf_r+0x1d2>
 8004692:	2340      	movs	r3, #64	; 0x40
 8004694:	616b      	str	r3, [r5, #20]
 8004696:	2300      	movs	r3, #0
 8004698:	9309      	str	r3, [sp, #36]	; 0x24
 800469a:	2320      	movs	r3, #32
 800469c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046a4:	2330      	movs	r3, #48	; 0x30
 80046a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004850 <_svfiprintf_r+0x1ec>
 80046aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ae:	f04f 0901 	mov.w	r9, #1
 80046b2:	4623      	mov	r3, r4
 80046b4:	469a      	mov	sl, r3
 80046b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ba:	b10a      	cbz	r2, 80046c0 <_svfiprintf_r+0x5c>
 80046bc:	2a25      	cmp	r2, #37	; 0x25
 80046be:	d1f9      	bne.n	80046b4 <_svfiprintf_r+0x50>
 80046c0:	ebba 0b04 	subs.w	fp, sl, r4
 80046c4:	d00b      	beq.n	80046de <_svfiprintf_r+0x7a>
 80046c6:	465b      	mov	r3, fp
 80046c8:	4622      	mov	r2, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7ff ff6d 	bl	80045ac <__ssputs_r>
 80046d2:	3001      	adds	r0, #1
 80046d4:	f000 80aa 	beq.w	800482c <_svfiprintf_r+0x1c8>
 80046d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046da:	445a      	add	r2, fp
 80046dc:	9209      	str	r2, [sp, #36]	; 0x24
 80046de:	f89a 3000 	ldrb.w	r3, [sl]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a2 	beq.w	800482c <_svfiprintf_r+0x1c8>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046f2:	f10a 0a01 	add.w	sl, sl, #1
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	9307      	str	r3, [sp, #28]
 80046fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004700:	4654      	mov	r4, sl
 8004702:	2205      	movs	r2, #5
 8004704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004708:	4851      	ldr	r0, [pc, #324]	; (8004850 <_svfiprintf_r+0x1ec>)
 800470a:	f7fb fd71 	bl	80001f0 <memchr>
 800470e:	9a04      	ldr	r2, [sp, #16]
 8004710:	b9d8      	cbnz	r0, 800474a <_svfiprintf_r+0xe6>
 8004712:	06d0      	lsls	r0, r2, #27
 8004714:	bf44      	itt	mi
 8004716:	2320      	movmi	r3, #32
 8004718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800471c:	0711      	lsls	r1, r2, #28
 800471e:	bf44      	itt	mi
 8004720:	232b      	movmi	r3, #43	; 0x2b
 8004722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004726:	f89a 3000 	ldrb.w	r3, [sl]
 800472a:	2b2a      	cmp	r3, #42	; 0x2a
 800472c:	d015      	beq.n	800475a <_svfiprintf_r+0xf6>
 800472e:	9a07      	ldr	r2, [sp, #28]
 8004730:	4654      	mov	r4, sl
 8004732:	2000      	movs	r0, #0
 8004734:	f04f 0c0a 	mov.w	ip, #10
 8004738:	4621      	mov	r1, r4
 800473a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800473e:	3b30      	subs	r3, #48	; 0x30
 8004740:	2b09      	cmp	r3, #9
 8004742:	d94e      	bls.n	80047e2 <_svfiprintf_r+0x17e>
 8004744:	b1b0      	cbz	r0, 8004774 <_svfiprintf_r+0x110>
 8004746:	9207      	str	r2, [sp, #28]
 8004748:	e014      	b.n	8004774 <_svfiprintf_r+0x110>
 800474a:	eba0 0308 	sub.w	r3, r0, r8
 800474e:	fa09 f303 	lsl.w	r3, r9, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	46a2      	mov	sl, r4
 8004758:	e7d2      	b.n	8004700 <_svfiprintf_r+0x9c>
 800475a:	9b03      	ldr	r3, [sp, #12]
 800475c:	1d19      	adds	r1, r3, #4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	9103      	str	r1, [sp, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfbb      	ittet	lt
 8004766:	425b      	neglt	r3, r3
 8004768:	f042 0202 	orrlt.w	r2, r2, #2
 800476c:	9307      	strge	r3, [sp, #28]
 800476e:	9307      	strlt	r3, [sp, #28]
 8004770:	bfb8      	it	lt
 8004772:	9204      	strlt	r2, [sp, #16]
 8004774:	7823      	ldrb	r3, [r4, #0]
 8004776:	2b2e      	cmp	r3, #46	; 0x2e
 8004778:	d10c      	bne.n	8004794 <_svfiprintf_r+0x130>
 800477a:	7863      	ldrb	r3, [r4, #1]
 800477c:	2b2a      	cmp	r3, #42	; 0x2a
 800477e:	d135      	bne.n	80047ec <_svfiprintf_r+0x188>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	9203      	str	r2, [sp, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfb8      	it	lt
 800478c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004790:	3402      	adds	r4, #2
 8004792:	9305      	str	r3, [sp, #20]
 8004794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004860 <_svfiprintf_r+0x1fc>
 8004798:	7821      	ldrb	r1, [r4, #0]
 800479a:	2203      	movs	r2, #3
 800479c:	4650      	mov	r0, sl
 800479e:	f7fb fd27 	bl	80001f0 <memchr>
 80047a2:	b140      	cbz	r0, 80047b6 <_svfiprintf_r+0x152>
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	eba0 000a 	sub.w	r0, r0, sl
 80047aa:	fa03 f000 	lsl.w	r0, r3, r0
 80047ae:	9b04      	ldr	r3, [sp, #16]
 80047b0:	4303      	orrs	r3, r0
 80047b2:	3401      	adds	r4, #1
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ba:	4826      	ldr	r0, [pc, #152]	; (8004854 <_svfiprintf_r+0x1f0>)
 80047bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047c0:	2206      	movs	r2, #6
 80047c2:	f7fb fd15 	bl	80001f0 <memchr>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d038      	beq.n	800483c <_svfiprintf_r+0x1d8>
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <_svfiprintf_r+0x1f4>)
 80047cc:	bb1b      	cbnz	r3, 8004816 <_svfiprintf_r+0x1b2>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	3307      	adds	r3, #7
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	3308      	adds	r3, #8
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047dc:	4433      	add	r3, r6
 80047de:	9309      	str	r3, [sp, #36]	; 0x24
 80047e0:	e767      	b.n	80046b2 <_svfiprintf_r+0x4e>
 80047e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047e6:	460c      	mov	r4, r1
 80047e8:	2001      	movs	r0, #1
 80047ea:	e7a5      	b.n	8004738 <_svfiprintf_r+0xd4>
 80047ec:	2300      	movs	r3, #0
 80047ee:	3401      	adds	r4, #1
 80047f0:	9305      	str	r3, [sp, #20]
 80047f2:	4619      	mov	r1, r3
 80047f4:	f04f 0c0a 	mov.w	ip, #10
 80047f8:	4620      	mov	r0, r4
 80047fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047fe:	3a30      	subs	r2, #48	; 0x30
 8004800:	2a09      	cmp	r2, #9
 8004802:	d903      	bls.n	800480c <_svfiprintf_r+0x1a8>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0c5      	beq.n	8004794 <_svfiprintf_r+0x130>
 8004808:	9105      	str	r1, [sp, #20]
 800480a:	e7c3      	b.n	8004794 <_svfiprintf_r+0x130>
 800480c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004810:	4604      	mov	r4, r0
 8004812:	2301      	movs	r3, #1
 8004814:	e7f0      	b.n	80047f8 <_svfiprintf_r+0x194>
 8004816:	ab03      	add	r3, sp, #12
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	462a      	mov	r2, r5
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <_svfiprintf_r+0x1f8>)
 800481e:	a904      	add	r1, sp, #16
 8004820:	4638      	mov	r0, r7
 8004822:	f3af 8000 	nop.w
 8004826:	1c42      	adds	r2, r0, #1
 8004828:	4606      	mov	r6, r0
 800482a:	d1d6      	bne.n	80047da <_svfiprintf_r+0x176>
 800482c:	89ab      	ldrh	r3, [r5, #12]
 800482e:	065b      	lsls	r3, r3, #25
 8004830:	f53f af2c 	bmi.w	800468c <_svfiprintf_r+0x28>
 8004834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004836:	b01d      	add	sp, #116	; 0x74
 8004838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483c:	ab03      	add	r3, sp, #12
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	462a      	mov	r2, r5
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <_svfiprintf_r+0x1f8>)
 8004844:	a904      	add	r1, sp, #16
 8004846:	4638      	mov	r0, r7
 8004848:	f000 f87a 	bl	8004940 <_printf_i>
 800484c:	e7eb      	b.n	8004826 <_svfiprintf_r+0x1c2>
 800484e:	bf00      	nop
 8004850:	08005068 	.word	0x08005068
 8004854:	08005072 	.word	0x08005072
 8004858:	00000000 	.word	0x00000000
 800485c:	080045ad 	.word	0x080045ad
 8004860:	0800506e 	.word	0x0800506e

08004864 <_printf_common>:
 8004864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004868:	4616      	mov	r6, r2
 800486a:	4699      	mov	r9, r3
 800486c:	688a      	ldr	r2, [r1, #8]
 800486e:	690b      	ldr	r3, [r1, #16]
 8004870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004874:	4293      	cmp	r3, r2
 8004876:	bfb8      	it	lt
 8004878:	4613      	movlt	r3, r2
 800487a:	6033      	str	r3, [r6, #0]
 800487c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004880:	4607      	mov	r7, r0
 8004882:	460c      	mov	r4, r1
 8004884:	b10a      	cbz	r2, 800488a <_printf_common+0x26>
 8004886:	3301      	adds	r3, #1
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	0699      	lsls	r1, r3, #26
 800488e:	bf42      	ittt	mi
 8004890:	6833      	ldrmi	r3, [r6, #0]
 8004892:	3302      	addmi	r3, #2
 8004894:	6033      	strmi	r3, [r6, #0]
 8004896:	6825      	ldr	r5, [r4, #0]
 8004898:	f015 0506 	ands.w	r5, r5, #6
 800489c:	d106      	bne.n	80048ac <_printf_common+0x48>
 800489e:	f104 0a19 	add.w	sl, r4, #25
 80048a2:	68e3      	ldr	r3, [r4, #12]
 80048a4:	6832      	ldr	r2, [r6, #0]
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	42ab      	cmp	r3, r5
 80048aa:	dc26      	bgt.n	80048fa <_printf_common+0x96>
 80048ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048b0:	1e13      	subs	r3, r2, #0
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	bf18      	it	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	0692      	lsls	r2, r2, #26
 80048ba:	d42b      	bmi.n	8004914 <_printf_common+0xb0>
 80048bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048c0:	4649      	mov	r1, r9
 80048c2:	4638      	mov	r0, r7
 80048c4:	47c0      	blx	r8
 80048c6:	3001      	adds	r0, #1
 80048c8:	d01e      	beq.n	8004908 <_printf_common+0xa4>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	68e5      	ldr	r5, [r4, #12]
 80048ce:	6832      	ldr	r2, [r6, #0]
 80048d0:	f003 0306 	and.w	r3, r3, #6
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	bf08      	it	eq
 80048d8:	1aad      	subeq	r5, r5, r2
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	bf0c      	ite	eq
 80048e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e4:	2500      	movne	r5, #0
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bfc4      	itt	gt
 80048ea:	1a9b      	subgt	r3, r3, r2
 80048ec:	18ed      	addgt	r5, r5, r3
 80048ee:	2600      	movs	r6, #0
 80048f0:	341a      	adds	r4, #26
 80048f2:	42b5      	cmp	r5, r6
 80048f4:	d11a      	bne.n	800492c <_printf_common+0xc8>
 80048f6:	2000      	movs	r0, #0
 80048f8:	e008      	b.n	800490c <_printf_common+0xa8>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4652      	mov	r2, sl
 80048fe:	4649      	mov	r1, r9
 8004900:	4638      	mov	r0, r7
 8004902:	47c0      	blx	r8
 8004904:	3001      	adds	r0, #1
 8004906:	d103      	bne.n	8004910 <_printf_common+0xac>
 8004908:	f04f 30ff 	mov.w	r0, #4294967295
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004910:	3501      	adds	r5, #1
 8004912:	e7c6      	b.n	80048a2 <_printf_common+0x3e>
 8004914:	18e1      	adds	r1, r4, r3
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	2030      	movs	r0, #48	; 0x30
 800491a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800491e:	4422      	add	r2, r4
 8004920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004928:	3302      	adds	r3, #2
 800492a:	e7c7      	b.n	80048bc <_printf_common+0x58>
 800492c:	2301      	movs	r3, #1
 800492e:	4622      	mov	r2, r4
 8004930:	4649      	mov	r1, r9
 8004932:	4638      	mov	r0, r7
 8004934:	47c0      	blx	r8
 8004936:	3001      	adds	r0, #1
 8004938:	d0e6      	beq.n	8004908 <_printf_common+0xa4>
 800493a:	3601      	adds	r6, #1
 800493c:	e7d9      	b.n	80048f2 <_printf_common+0x8e>
	...

08004940 <_printf_i>:
 8004940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004944:	7e0f      	ldrb	r7, [r1, #24]
 8004946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004948:	2f78      	cmp	r7, #120	; 0x78
 800494a:	4691      	mov	r9, r2
 800494c:	4680      	mov	r8, r0
 800494e:	460c      	mov	r4, r1
 8004950:	469a      	mov	sl, r3
 8004952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004956:	d807      	bhi.n	8004968 <_printf_i+0x28>
 8004958:	2f62      	cmp	r7, #98	; 0x62
 800495a:	d80a      	bhi.n	8004972 <_printf_i+0x32>
 800495c:	2f00      	cmp	r7, #0
 800495e:	f000 80d8 	beq.w	8004b12 <_printf_i+0x1d2>
 8004962:	2f58      	cmp	r7, #88	; 0x58
 8004964:	f000 80a3 	beq.w	8004aae <_printf_i+0x16e>
 8004968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800496c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004970:	e03a      	b.n	80049e8 <_printf_i+0xa8>
 8004972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004976:	2b15      	cmp	r3, #21
 8004978:	d8f6      	bhi.n	8004968 <_printf_i+0x28>
 800497a:	a101      	add	r1, pc, #4	; (adr r1, 8004980 <_printf_i+0x40>)
 800497c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004980:	080049d9 	.word	0x080049d9
 8004984:	080049ed 	.word	0x080049ed
 8004988:	08004969 	.word	0x08004969
 800498c:	08004969 	.word	0x08004969
 8004990:	08004969 	.word	0x08004969
 8004994:	08004969 	.word	0x08004969
 8004998:	080049ed 	.word	0x080049ed
 800499c:	08004969 	.word	0x08004969
 80049a0:	08004969 	.word	0x08004969
 80049a4:	08004969 	.word	0x08004969
 80049a8:	08004969 	.word	0x08004969
 80049ac:	08004af9 	.word	0x08004af9
 80049b0:	08004a1d 	.word	0x08004a1d
 80049b4:	08004adb 	.word	0x08004adb
 80049b8:	08004969 	.word	0x08004969
 80049bc:	08004969 	.word	0x08004969
 80049c0:	08004b1b 	.word	0x08004b1b
 80049c4:	08004969 	.word	0x08004969
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004969 	.word	0x08004969
 80049d0:	08004969 	.word	0x08004969
 80049d4:	08004ae3 	.word	0x08004ae3
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	1d1a      	adds	r2, r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	602a      	str	r2, [r5, #0]
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0a3      	b.n	8004b34 <_printf_i+0x1f4>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	6829      	ldr	r1, [r5, #0]
 80049f0:	0606      	lsls	r6, r0, #24
 80049f2:	f101 0304 	add.w	r3, r1, #4
 80049f6:	d50a      	bpl.n	8004a0e <_printf_i+0xce>
 80049f8:	680e      	ldr	r6, [r1, #0]
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	2e00      	cmp	r6, #0
 80049fe:	da03      	bge.n	8004a08 <_printf_i+0xc8>
 8004a00:	232d      	movs	r3, #45	; 0x2d
 8004a02:	4276      	negs	r6, r6
 8004a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a08:	485e      	ldr	r0, [pc, #376]	; (8004b84 <_printf_i+0x244>)
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	e019      	b.n	8004a42 <_printf_i+0x102>
 8004a0e:	680e      	ldr	r6, [r1, #0]
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a16:	bf18      	it	ne
 8004a18:	b236      	sxthne	r6, r6
 8004a1a:	e7ef      	b.n	80049fc <_printf_i+0xbc>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	1d19      	adds	r1, r3, #4
 8004a22:	6029      	str	r1, [r5, #0]
 8004a24:	0601      	lsls	r1, r0, #24
 8004a26:	d501      	bpl.n	8004a2c <_printf_i+0xec>
 8004a28:	681e      	ldr	r6, [r3, #0]
 8004a2a:	e002      	b.n	8004a32 <_printf_i+0xf2>
 8004a2c:	0646      	lsls	r6, r0, #25
 8004a2e:	d5fb      	bpl.n	8004a28 <_printf_i+0xe8>
 8004a30:	881e      	ldrh	r6, [r3, #0]
 8004a32:	4854      	ldr	r0, [pc, #336]	; (8004b84 <_printf_i+0x244>)
 8004a34:	2f6f      	cmp	r7, #111	; 0x6f
 8004a36:	bf0c      	ite	eq
 8004a38:	2308      	moveq	r3, #8
 8004a3a:	230a      	movne	r3, #10
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a42:	6865      	ldr	r5, [r4, #4]
 8004a44:	60a5      	str	r5, [r4, #8]
 8004a46:	2d00      	cmp	r5, #0
 8004a48:	bfa2      	ittt	ge
 8004a4a:	6821      	ldrge	r1, [r4, #0]
 8004a4c:	f021 0104 	bicge.w	r1, r1, #4
 8004a50:	6021      	strge	r1, [r4, #0]
 8004a52:	b90e      	cbnz	r6, 8004a58 <_printf_i+0x118>
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	d04d      	beq.n	8004af4 <_printf_i+0x1b4>
 8004a58:	4615      	mov	r5, r2
 8004a5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a62:	5dc7      	ldrb	r7, [r0, r7]
 8004a64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a68:	4637      	mov	r7, r6
 8004a6a:	42bb      	cmp	r3, r7
 8004a6c:	460e      	mov	r6, r1
 8004a6e:	d9f4      	bls.n	8004a5a <_printf_i+0x11a>
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d10b      	bne.n	8004a8c <_printf_i+0x14c>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	07de      	lsls	r6, r3, #31
 8004a78:	d508      	bpl.n	8004a8c <_printf_i+0x14c>
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	6861      	ldr	r1, [r4, #4]
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	bfde      	ittt	le
 8004a82:	2330      	movle	r3, #48	; 0x30
 8004a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a8c:	1b52      	subs	r2, r2, r5
 8004a8e:	6122      	str	r2, [r4, #16]
 8004a90:	f8cd a000 	str.w	sl, [sp]
 8004a94:	464b      	mov	r3, r9
 8004a96:	aa03      	add	r2, sp, #12
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	f7ff fee2 	bl	8004864 <_printf_common>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d14c      	bne.n	8004b3e <_printf_i+0x1fe>
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	b004      	add	sp, #16
 8004aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aae:	4835      	ldr	r0, [pc, #212]	; (8004b84 <_printf_i+0x244>)
 8004ab0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ab4:	6829      	ldr	r1, [r5, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004abc:	6029      	str	r1, [r5, #0]
 8004abe:	061d      	lsls	r5, r3, #24
 8004ac0:	d514      	bpl.n	8004aec <_printf_i+0x1ac>
 8004ac2:	07df      	lsls	r7, r3, #31
 8004ac4:	bf44      	itt	mi
 8004ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8004aca:	6023      	strmi	r3, [r4, #0]
 8004acc:	b91e      	cbnz	r6, 8004ad6 <_printf_i+0x196>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	f023 0320 	bic.w	r3, r3, #32
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	e7b0      	b.n	8004a3c <_printf_i+0xfc>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	f043 0320 	orr.w	r3, r3, #32
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	2378      	movs	r3, #120	; 0x78
 8004ae4:	4828      	ldr	r0, [pc, #160]	; (8004b88 <_printf_i+0x248>)
 8004ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004aea:	e7e3      	b.n	8004ab4 <_printf_i+0x174>
 8004aec:	0659      	lsls	r1, r3, #25
 8004aee:	bf48      	it	mi
 8004af0:	b2b6      	uxthmi	r6, r6
 8004af2:	e7e6      	b.n	8004ac2 <_printf_i+0x182>
 8004af4:	4615      	mov	r5, r2
 8004af6:	e7bb      	b.n	8004a70 <_printf_i+0x130>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	6826      	ldr	r6, [r4, #0]
 8004afc:	6961      	ldr	r1, [r4, #20]
 8004afe:	1d18      	adds	r0, r3, #4
 8004b00:	6028      	str	r0, [r5, #0]
 8004b02:	0635      	lsls	r5, r6, #24
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	d501      	bpl.n	8004b0c <_printf_i+0x1cc>
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	e002      	b.n	8004b12 <_printf_i+0x1d2>
 8004b0c:	0670      	lsls	r0, r6, #25
 8004b0e:	d5fb      	bpl.n	8004b08 <_printf_i+0x1c8>
 8004b10:	8019      	strh	r1, [r3, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	6123      	str	r3, [r4, #16]
 8004b16:	4615      	mov	r5, r2
 8004b18:	e7ba      	b.n	8004a90 <_printf_i+0x150>
 8004b1a:	682b      	ldr	r3, [r5, #0]
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	602a      	str	r2, [r5, #0]
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	6862      	ldr	r2, [r4, #4]
 8004b24:	2100      	movs	r1, #0
 8004b26:	4628      	mov	r0, r5
 8004b28:	f7fb fb62 	bl	80001f0 <memchr>
 8004b2c:	b108      	cbz	r0, 8004b32 <_printf_i+0x1f2>
 8004b2e:	1b40      	subs	r0, r0, r5
 8004b30:	6060      	str	r0, [r4, #4]
 8004b32:	6863      	ldr	r3, [r4, #4]
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	2300      	movs	r3, #0
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	e7a8      	b.n	8004a90 <_printf_i+0x150>
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	462a      	mov	r2, r5
 8004b42:	4649      	mov	r1, r9
 8004b44:	4640      	mov	r0, r8
 8004b46:	47d0      	blx	sl
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d0ab      	beq.n	8004aa4 <_printf_i+0x164>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	079b      	lsls	r3, r3, #30
 8004b50:	d413      	bmi.n	8004b7a <_printf_i+0x23a>
 8004b52:	68e0      	ldr	r0, [r4, #12]
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	4298      	cmp	r0, r3
 8004b58:	bfb8      	it	lt
 8004b5a:	4618      	movlt	r0, r3
 8004b5c:	e7a4      	b.n	8004aa8 <_printf_i+0x168>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	4632      	mov	r2, r6
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	47d0      	blx	sl
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d09b      	beq.n	8004aa4 <_printf_i+0x164>
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	9903      	ldr	r1, [sp, #12]
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	42ab      	cmp	r3, r5
 8004b76:	dcf2      	bgt.n	8004b5e <_printf_i+0x21e>
 8004b78:	e7eb      	b.n	8004b52 <_printf_i+0x212>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	f104 0619 	add.w	r6, r4, #25
 8004b80:	e7f5      	b.n	8004b6e <_printf_i+0x22e>
 8004b82:	bf00      	nop
 8004b84:	08005079 	.word	0x08005079
 8004b88:	0800508a 	.word	0x0800508a

08004b8c <memmove>:
 8004b8c:	4288      	cmp	r0, r1
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	eb01 0402 	add.w	r4, r1, r2
 8004b94:	d902      	bls.n	8004b9c <memmove+0x10>
 8004b96:	4284      	cmp	r4, r0
 8004b98:	4623      	mov	r3, r4
 8004b9a:	d807      	bhi.n	8004bac <memmove+0x20>
 8004b9c:	1e43      	subs	r3, r0, #1
 8004b9e:	42a1      	cmp	r1, r4
 8004ba0:	d008      	beq.n	8004bb4 <memmove+0x28>
 8004ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004baa:	e7f8      	b.n	8004b9e <memmove+0x12>
 8004bac:	4402      	add	r2, r0
 8004bae:	4601      	mov	r1, r0
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	d100      	bne.n	8004bb6 <memmove+0x2a>
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bbe:	e7f7      	b.n	8004bb0 <memmove+0x24>

08004bc0 <_free_r>:
 8004bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bc2:	2900      	cmp	r1, #0
 8004bc4:	d044      	beq.n	8004c50 <_free_r+0x90>
 8004bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bca:	9001      	str	r0, [sp, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f1a1 0404 	sub.w	r4, r1, #4
 8004bd2:	bfb8      	it	lt
 8004bd4:	18e4      	addlt	r4, r4, r3
 8004bd6:	f000 f913 	bl	8004e00 <__malloc_lock>
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <_free_r+0x94>)
 8004bdc:	9801      	ldr	r0, [sp, #4]
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	b933      	cbnz	r3, 8004bf0 <_free_r+0x30>
 8004be2:	6063      	str	r3, [r4, #4]
 8004be4:	6014      	str	r4, [r2, #0]
 8004be6:	b003      	add	sp, #12
 8004be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bec:	f000 b90e 	b.w	8004e0c <__malloc_unlock>
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d908      	bls.n	8004c06 <_free_r+0x46>
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	1961      	adds	r1, r4, r5
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	bf01      	itttt	eq
 8004bfc:	6819      	ldreq	r1, [r3, #0]
 8004bfe:	685b      	ldreq	r3, [r3, #4]
 8004c00:	1949      	addeq	r1, r1, r5
 8004c02:	6021      	streq	r1, [r4, #0]
 8004c04:	e7ed      	b.n	8004be2 <_free_r+0x22>
 8004c06:	461a      	mov	r2, r3
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	b10b      	cbz	r3, 8004c10 <_free_r+0x50>
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	d9fa      	bls.n	8004c06 <_free_r+0x46>
 8004c10:	6811      	ldr	r1, [r2, #0]
 8004c12:	1855      	adds	r5, r2, r1
 8004c14:	42a5      	cmp	r5, r4
 8004c16:	d10b      	bne.n	8004c30 <_free_r+0x70>
 8004c18:	6824      	ldr	r4, [r4, #0]
 8004c1a:	4421      	add	r1, r4
 8004c1c:	1854      	adds	r4, r2, r1
 8004c1e:	42a3      	cmp	r3, r4
 8004c20:	6011      	str	r1, [r2, #0]
 8004c22:	d1e0      	bne.n	8004be6 <_free_r+0x26>
 8004c24:	681c      	ldr	r4, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	6053      	str	r3, [r2, #4]
 8004c2a:	4421      	add	r1, r4
 8004c2c:	6011      	str	r1, [r2, #0]
 8004c2e:	e7da      	b.n	8004be6 <_free_r+0x26>
 8004c30:	d902      	bls.n	8004c38 <_free_r+0x78>
 8004c32:	230c      	movs	r3, #12
 8004c34:	6003      	str	r3, [r0, #0]
 8004c36:	e7d6      	b.n	8004be6 <_free_r+0x26>
 8004c38:	6825      	ldr	r5, [r4, #0]
 8004c3a:	1961      	adds	r1, r4, r5
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	bf04      	itt	eq
 8004c40:	6819      	ldreq	r1, [r3, #0]
 8004c42:	685b      	ldreq	r3, [r3, #4]
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	bf04      	itt	eq
 8004c48:	1949      	addeq	r1, r1, r5
 8004c4a:	6021      	streq	r1, [r4, #0]
 8004c4c:	6054      	str	r4, [r2, #4]
 8004c4e:	e7ca      	b.n	8004be6 <_free_r+0x26>
 8004c50:	b003      	add	sp, #12
 8004c52:	bd30      	pop	{r4, r5, pc}
 8004c54:	20000278 	.word	0x20000278

08004c58 <sbrk_aligned>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4e0e      	ldr	r6, [pc, #56]	; (8004c94 <sbrk_aligned+0x3c>)
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	6831      	ldr	r1, [r6, #0]
 8004c60:	4605      	mov	r5, r0
 8004c62:	b911      	cbnz	r1, 8004c6a <sbrk_aligned+0x12>
 8004c64:	f000 f8bc 	bl	8004de0 <_sbrk_r>
 8004c68:	6030      	str	r0, [r6, #0]
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 f8b7 	bl	8004de0 <_sbrk_r>
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d00a      	beq.n	8004c8c <sbrk_aligned+0x34>
 8004c76:	1cc4      	adds	r4, r0, #3
 8004c78:	f024 0403 	bic.w	r4, r4, #3
 8004c7c:	42a0      	cmp	r0, r4
 8004c7e:	d007      	beq.n	8004c90 <sbrk_aligned+0x38>
 8004c80:	1a21      	subs	r1, r4, r0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 f8ac 	bl	8004de0 <_sbrk_r>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d101      	bne.n	8004c90 <sbrk_aligned+0x38>
 8004c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c90:	4620      	mov	r0, r4
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	2000027c 	.word	0x2000027c

08004c98 <_malloc_r>:
 8004c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	1ccd      	adds	r5, r1, #3
 8004c9e:	f025 0503 	bic.w	r5, r5, #3
 8004ca2:	3508      	adds	r5, #8
 8004ca4:	2d0c      	cmp	r5, #12
 8004ca6:	bf38      	it	cc
 8004ca8:	250c      	movcc	r5, #12
 8004caa:	2d00      	cmp	r5, #0
 8004cac:	4607      	mov	r7, r0
 8004cae:	db01      	blt.n	8004cb4 <_malloc_r+0x1c>
 8004cb0:	42a9      	cmp	r1, r5
 8004cb2:	d905      	bls.n	8004cc0 <_malloc_r+0x28>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	2600      	movs	r6, #0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	4e2e      	ldr	r6, [pc, #184]	; (8004d7c <_malloc_r+0xe4>)
 8004cc2:	f000 f89d 	bl	8004e00 <__malloc_lock>
 8004cc6:	6833      	ldr	r3, [r6, #0]
 8004cc8:	461c      	mov	r4, r3
 8004cca:	bb34      	cbnz	r4, 8004d1a <_malloc_r+0x82>
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f7ff ffc2 	bl	8004c58 <sbrk_aligned>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	d14d      	bne.n	8004d76 <_malloc_r+0xde>
 8004cda:	6834      	ldr	r4, [r6, #0]
 8004cdc:	4626      	mov	r6, r4
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	d140      	bne.n	8004d64 <_malloc_r+0xcc>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	eb04 0803 	add.w	r8, r4, r3
 8004cec:	f000 f878 	bl	8004de0 <_sbrk_r>
 8004cf0:	4580      	cmp	r8, r0
 8004cf2:	d13a      	bne.n	8004d6a <_malloc_r+0xd2>
 8004cf4:	6821      	ldr	r1, [r4, #0]
 8004cf6:	3503      	adds	r5, #3
 8004cf8:	1a6d      	subs	r5, r5, r1
 8004cfa:	f025 0503 	bic.w	r5, r5, #3
 8004cfe:	3508      	adds	r5, #8
 8004d00:	2d0c      	cmp	r5, #12
 8004d02:	bf38      	it	cc
 8004d04:	250c      	movcc	r5, #12
 8004d06:	4629      	mov	r1, r5
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7ff ffa5 	bl	8004c58 <sbrk_aligned>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d02b      	beq.n	8004d6a <_malloc_r+0xd2>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	442b      	add	r3, r5
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	e00e      	b.n	8004d38 <_malloc_r+0xa0>
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	1b52      	subs	r2, r2, r5
 8004d1e:	d41e      	bmi.n	8004d5e <_malloc_r+0xc6>
 8004d20:	2a0b      	cmp	r2, #11
 8004d22:	d916      	bls.n	8004d52 <_malloc_r+0xba>
 8004d24:	1961      	adds	r1, r4, r5
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	6025      	str	r5, [r4, #0]
 8004d2a:	bf18      	it	ne
 8004d2c:	6059      	strne	r1, [r3, #4]
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	bf08      	it	eq
 8004d32:	6031      	streq	r1, [r6, #0]
 8004d34:	5162      	str	r2, [r4, r5]
 8004d36:	604b      	str	r3, [r1, #4]
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f104 060b 	add.w	r6, r4, #11
 8004d3e:	f000 f865 	bl	8004e0c <__malloc_unlock>
 8004d42:	f026 0607 	bic.w	r6, r6, #7
 8004d46:	1d23      	adds	r3, r4, #4
 8004d48:	1af2      	subs	r2, r6, r3
 8004d4a:	d0b6      	beq.n	8004cba <_malloc_r+0x22>
 8004d4c:	1b9b      	subs	r3, r3, r6
 8004d4e:	50a3      	str	r3, [r4, r2]
 8004d50:	e7b3      	b.n	8004cba <_malloc_r+0x22>
 8004d52:	6862      	ldr	r2, [r4, #4]
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	bf0c      	ite	eq
 8004d58:	6032      	streq	r2, [r6, #0]
 8004d5a:	605a      	strne	r2, [r3, #4]
 8004d5c:	e7ec      	b.n	8004d38 <_malloc_r+0xa0>
 8004d5e:	4623      	mov	r3, r4
 8004d60:	6864      	ldr	r4, [r4, #4]
 8004d62:	e7b2      	b.n	8004cca <_malloc_r+0x32>
 8004d64:	4634      	mov	r4, r6
 8004d66:	6876      	ldr	r6, [r6, #4]
 8004d68:	e7b9      	b.n	8004cde <_malloc_r+0x46>
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	4638      	mov	r0, r7
 8004d70:	f000 f84c 	bl	8004e0c <__malloc_unlock>
 8004d74:	e7a1      	b.n	8004cba <_malloc_r+0x22>
 8004d76:	6025      	str	r5, [r4, #0]
 8004d78:	e7de      	b.n	8004d38 <_malloc_r+0xa0>
 8004d7a:	bf00      	nop
 8004d7c:	20000278 	.word	0x20000278

08004d80 <_realloc_r>:
 8004d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	4680      	mov	r8, r0
 8004d86:	4614      	mov	r4, r2
 8004d88:	460e      	mov	r6, r1
 8004d8a:	b921      	cbnz	r1, 8004d96 <_realloc_r+0x16>
 8004d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d90:	4611      	mov	r1, r2
 8004d92:	f7ff bf81 	b.w	8004c98 <_malloc_r>
 8004d96:	b92a      	cbnz	r2, 8004da4 <_realloc_r+0x24>
 8004d98:	f7ff ff12 	bl	8004bc0 <_free_r>
 8004d9c:	4625      	mov	r5, r4
 8004d9e:	4628      	mov	r0, r5
 8004da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da4:	f000 f838 	bl	8004e18 <_malloc_usable_size_r>
 8004da8:	4284      	cmp	r4, r0
 8004daa:	4607      	mov	r7, r0
 8004dac:	d802      	bhi.n	8004db4 <_realloc_r+0x34>
 8004dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004db2:	d812      	bhi.n	8004dda <_realloc_r+0x5a>
 8004db4:	4621      	mov	r1, r4
 8004db6:	4640      	mov	r0, r8
 8004db8:	f7ff ff6e 	bl	8004c98 <_malloc_r>
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d0ed      	beq.n	8004d9e <_realloc_r+0x1e>
 8004dc2:	42bc      	cmp	r4, r7
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	bf28      	it	cs
 8004dca:	463a      	movcs	r2, r7
 8004dcc:	f7ff fbb8 	bl	8004540 <memcpy>
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f7ff fef4 	bl	8004bc0 <_free_r>
 8004dd8:	e7e1      	b.n	8004d9e <_realloc_r+0x1e>
 8004dda:	4635      	mov	r5, r6
 8004ddc:	e7df      	b.n	8004d9e <_realloc_r+0x1e>
	...

08004de0 <_sbrk_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d06      	ldr	r5, [pc, #24]	; (8004dfc <_sbrk_r+0x1c>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	f7fc fd1e 	bl	800182c <_sbrk>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_sbrk_r+0x1a>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_sbrk_r+0x1a>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	20000280 	.word	0x20000280

08004e00 <__malloc_lock>:
 8004e00:	4801      	ldr	r0, [pc, #4]	; (8004e08 <__malloc_lock+0x8>)
 8004e02:	f000 b811 	b.w	8004e28 <__retarget_lock_acquire_recursive>
 8004e06:	bf00      	nop
 8004e08:	20000284 	.word	0x20000284

08004e0c <__malloc_unlock>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <__malloc_unlock+0x8>)
 8004e0e:	f000 b80c 	b.w	8004e2a <__retarget_lock_release_recursive>
 8004e12:	bf00      	nop
 8004e14:	20000284 	.word	0x20000284

08004e18 <_malloc_usable_size_r>:
 8004e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e1c:	1f18      	subs	r0, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfbc      	itt	lt
 8004e22:	580b      	ldrlt	r3, [r1, r0]
 8004e24:	18c0      	addlt	r0, r0, r3
 8004e26:	4770      	bx	lr

08004e28 <__retarget_lock_acquire_recursive>:
 8004e28:	4770      	bx	lr

08004e2a <__retarget_lock_release_recursive>:
 8004e2a:	4770      	bx	lr

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
